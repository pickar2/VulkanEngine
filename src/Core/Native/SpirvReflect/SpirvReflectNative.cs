//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/bottlenoselabs/c2cs (v2.3.0.0)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------

#nullable enable
#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace VulkanRenderer.SpirvReflect;

public static unsafe partial class Native
{
	private const string LibraryName = "Native/Libs/spirv_reflect.dll";

	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvParseFormat(SpvReflectTypeDescription* p_type, SpvReflectFormat* p_format);

	// Function @ spirv_reflect.h:500:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectCreateShaderModule(ulong size, void* p_code, SpvReflectShaderModule* p_module);

	// Function @ spirv_reflect.h:515:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult
		spvReflectCreateShaderModule2(SpvReflectModuleFlags flags, ulong size, void* p_code, SpvReflectShaderModule* p_module);

	// Function @ spirv_reflect.h:523:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectGetShaderModule(ulong size, void* p_code, SpvReflectShaderModule* p_module);

	// Function @ spirv_reflect.h:535:6
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern void spvReflectDestroyShaderModule(SpvReflectShaderModule* p_module);

	// Function @ spirv_reflect.h:544:10
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern uint spvReflectGetCodeSize(SpvReflectShaderModule* p_module);

	// Function @ spirv_reflect.h:553:17
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern char* spvReflectGetCode(SpvReflectShaderModule* p_module);

	// Function @ spirv_reflect.h:562:29
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectEntryPoint* spvReflectGetEntryPoint(SpvReflectShaderModule* p_module, Runtime.CString entry_point);

	// Function @ spirv_reflect.h:585:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumerateDescriptorBindings(SpvReflectShaderModule* p_module, uint* p_count,
		SpvReflectDescriptorBinding** pp_bindings);

	// Function @ spirv_reflect.h:611:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumerateEntryPointDescriptorBindings(SpvReflectShaderModule* p_module, Runtime.CString entry_point,
		uint* p_count, SpvReflectDescriptorBinding** pp_bindings);

	// Function @ spirv_reflect.h:636:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumerateDescriptorSets(SpvReflectShaderModule* p_module, uint* p_count, SpvReflectDescriptorSet** pp_sets);

	// Function @ spirv_reflect.h:662:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumerateEntryPointDescriptorSets(SpvReflectShaderModule* p_module, Runtime.CString entry_point,
		uint* p_count, SpvReflectDescriptorSet** pp_sets);

	// Function @ spirv_reflect.h:689:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumerateInterfaceVariables(SpvReflectShaderModule* p_module, uint* p_count,
		SpvReflectInterfaceVariable** pp_variables);

	// Function @ spirv_reflect.h:714:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumerateEntryPointInterfaceVariables(SpvReflectShaderModule* p_module, Runtime.CString entry_point,
		uint* p_count, SpvReflectInterfaceVariable** pp_variables);

	// Function @ spirv_reflect.h:741:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumerateInputVariables(SpvReflectShaderModule* p_module, uint* p_count,
		SpvReflectInterfaceVariable** pp_variables);

	// Function @ spirv_reflect.h:766:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumerateEntryPointInputVariables(SpvReflectShaderModule* p_module, Runtime.CString entry_point,
		uint* p_count, SpvReflectInterfaceVariable** pp_variables);

	// Function @ spirv_reflect.h:793:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumerateOutputVariables(SpvReflectShaderModule* p_module, uint* p_count,
		SpvReflectInterfaceVariable** pp_variables);

	// Function @ spirv_reflect.h:818:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumerateEntryPointOutputVariables(SpvReflectShaderModule* p_module, Runtime.CString entry_point,
		uint* p_count, SpvReflectInterfaceVariable** pp_variables);

	// Function @ spirv_reflect.h:846:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumeratePushConstantBlocks(SpvReflectShaderModule* p_module, uint* p_count,
		SpvReflectBlockVariable** pp_blocks);

	// Function @ spirv_reflect.h:852:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult
		spvReflectEnumeratePushConstants(SpvReflectShaderModule* p_module, uint* p_count, SpvReflectBlockVariable** pp_blocks);

	// Function @ spirv_reflect.h:878:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectEnumerateEntryPointPushConstantBlocks(SpvReflectShaderModule* p_module, Runtime.CString entry_point,
		uint* p_count, SpvReflectBlockVariable** pp_blocks);

	// Function @ spirv_reflect.h:908:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectDescriptorBinding* spvReflectGetDescriptorBinding(SpvReflectShaderModule* p_module, uint binding_number, uint set_number,
		SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:940:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectDescriptorBinding* spvReflectGetEntryPointDescriptorBinding(SpvReflectShaderModule* p_module, Runtime.CString entry_point,
		uint binding_number, uint set_number, SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:965:32
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectDescriptorSet* spvReflectGetDescriptorSet(SpvReflectShaderModule* p_module, uint set_number, SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:988:32
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectDescriptorSet* spvReflectGetEntryPointDescriptorSet(SpvReflectShaderModule* p_module, Runtime.CString entry_point,
		uint set_number, SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1016:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectInterfaceVariable* spvReflectGetInputVariableByLocation(SpvReflectShaderModule* p_module, uint location,
		SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1022:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectInterfaceVariable* spvReflectGetInputVariable(SpvReflectShaderModule* p_module, uint location, SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1049:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectInterfaceVariable* spvReflectGetEntryPointInputVariableByLocation(SpvReflectShaderModule* p_module,
		Runtime.CString entry_point, uint location, SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1077:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectInterfaceVariable* spvReflectGetInputVariableBySemantic(SpvReflectShaderModule* p_module, Runtime.CString semantic,
		SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1105:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectInterfaceVariable* spvReflectGetEntryPointInputVariableBySemantic(SpvReflectShaderModule* p_module,
		Runtime.CString entry_point, Runtime.CString semantic, SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1132:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectInterfaceVariable* spvReflectGetOutputVariableByLocation(SpvReflectShaderModule* p_module, uint location,
		SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1138:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectInterfaceVariable* spvReflectGetOutputVariable(SpvReflectShaderModule* p_module, uint location, SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1165:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectInterfaceVariable* spvReflectGetEntryPointOutputVariableByLocation(SpvReflectShaderModule* p_module,
		Runtime.CString entry_point, uint location, SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1193:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectInterfaceVariable* spvReflectGetOutputVariableBySemantic(SpvReflectShaderModule* p_module, Runtime.CString semantic,
		SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1221:36
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectInterfaceVariable* spvReflectGetEntryPointOutputVariableBySemantic(SpvReflectShaderModule* p_module,
		Runtime.CString entry_point, Runtime.CString semantic, SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1245:32
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectBlockVariable* spvReflectGetPushConstantBlock(SpvReflectShaderModule* p_module, uint index, SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1251:32
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectBlockVariable* spvReflectGetPushConstant(SpvReflectShaderModule* p_module, uint index, SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1276:32
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectBlockVariable* spvReflectGetEntryPointPushConstantBlock(SpvReflectShaderModule* p_module, Runtime.CString entry_point,
		SpvReflectResult* p_result);

	// Function @ spirv_reflect.h:1306:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectChangeDescriptorBindingNumbers(SpvReflectShaderModule* p_module, SpvReflectDescriptorBinding* p_binding,
		uint new_binding_number, uint new_set_number);

	// Function @ spirv_reflect.h:1313:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectChangeDescriptorBindingNumber(SpvReflectShaderModule* p_module,
		SpvReflectDescriptorBinding* p_descriptor_binding, uint new_binding_number, uint optional_new_set_number);

	// Function @ spirv_reflect.h:1342:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectChangeDescriptorSetNumber(SpvReflectShaderModule* p_module, SpvReflectDescriptorSet* p_set,
		uint new_set_number);

	// Function @ spirv_reflect.h:1365:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectChangeInputVariableLocation(SpvReflectShaderModule* p_module, SpvReflectInterfaceVariable* p_input_variable,
		uint new_location);

	// Function @ spirv_reflect.h:1389:18
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern SpvReflectResult spvReflectChangeOutputVariableLocation(SpvReflectShaderModule* p_module,
		SpvReflectInterfaceVariable* p_output_variable, uint new_location);

	// Function @ spirv_reflect.h:1402:13
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern Runtime.CString spvReflectSourceLanguage(SpvSourceLanguage source_lang);

	// Function @ spirv_reflect.h:1410:13
	[DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern Runtime.CString spvReflectBlockVariableTypeName(SpvReflectBlockVariable* p_var);

	// Struct @ spirv_reflect.h:486:3
	[StructLayout(LayoutKind.Explicit, Size = 1184, Pack = 8)]
	public struct SpvReflectShaderModule
	{
		[FieldOffset(0)] // size = 4, padding = 4
		public SpvReflectGenerator generator;

		[FieldOffset(8)] // size = 8, padding = 0
		public Runtime.CString entry_point_name;

		[FieldOffset(16)] // size = 4, padding = 0
		public uint entry_point_id;

		[FieldOffset(20)] // size = 4, padding = 0
		public uint entry_point_count;

		[FieldOffset(24)] // size = 8, padding = 0
		public SpvReflectEntryPoint* entry_points;

		[FieldOffset(32)] // size = 4, padding = 0
		public SpvSourceLanguage source_language;

		[FieldOffset(36)] // size = 4, padding = 0
		public uint source_language_version;

		[FieldOffset(40)] // size = 8, padding = 0
		public Runtime.CString source_file;

		[FieldOffset(48)] // size = 8, padding = 0
		public Runtime.CString source_source;

		[FieldOffset(56)] // size = 4, padding = 0
		public SpvExecutionModel spirv_execution_model;

		[FieldOffset(60)] // size = 4, padding = 0
		public SpvReflectShaderStageFlagBits shader_stage;

		[FieldOffset(64)] // size = 4, padding = 4
		public uint descriptor_binding_count;

		[FieldOffset(72)] // size = 8, padding = 0
		public SpvReflectDescriptorBinding* descriptor_bindings;

		[FieldOffset(80)] // size = 4, padding = 4
		public uint descriptor_set_count;

		[FieldOffset(88)] // size = 1024, padding = 0
		public fixed ulong _descriptor_sets[1024 / 8]; // SpvReflectDescriptorSet[64]

		public Span<SpvReflectDescriptorSet> descriptor_sets
		{
			get
			{
				fixed (SpvReflectShaderModule* @this = &this)
				{
					var pointer = &@this->_descriptor_sets[0];
					var span = new Span<SpvReflectDescriptorSet>(pointer, 64);
					return span;
				}
			}
		}

		[FieldOffset(1112)] // size = 4, padding = 4
		public uint input_variable_count;

		[FieldOffset(1120)] // size = 8, padding = 0
		public SpvReflectInterfaceVariable** input_variables;

		[FieldOffset(1128)] // size = 4, padding = 4
		public uint output_variable_count;

		[FieldOffset(1136)] // size = 8, padding = 0
		public SpvReflectInterfaceVariable** output_variables;

		[FieldOffset(1144)] // size = 4, padding = 4
		public uint interface_variable_count;

		[FieldOffset(1152)] // size = 8, padding = 0
		public SpvReflectInterfaceVariable* interface_variables;

		[FieldOffset(1160)] // size = 4, padding = 4
		public uint push_constant_block_count;

		[FieldOffset(1168)] // size = 8, padding = 0
		public SpvReflectBlockVariable* push_constant_blocks;

		[FieldOffset(1176)] // size = 8, padding = 0
		public Internal* _internal;
	}

	// Struct @ spirv_reflect.h:446:3
	[StructLayout(LayoutKind.Explicit, Size = 136, Pack = 8)]
	public struct SpvReflectEntryPoint
	{
		[FieldOffset(0)] // size = 8, padding = 0
		public Runtime.CString name;

		[FieldOffset(8)] // size = 4, padding = 0
		public uint id;

		[FieldOffset(12)] // size = 4, padding = 0
		public SpvExecutionModel spirv_execution_model;

		[FieldOffset(16)] // size = 4, padding = 0
		public SpvReflectShaderStageFlagBits shader_stage;

		[FieldOffset(20)] // size = 4, padding = 0
		public uint input_variable_count;

		[FieldOffset(24)] // size = 8, padding = 0
		public SpvReflectInterfaceVariable** input_variables;

		[FieldOffset(32)] // size = 4, padding = 4
		public uint output_variable_count;

		[FieldOffset(40)] // size = 8, padding = 0
		public SpvReflectInterfaceVariable** output_variables;

		[FieldOffset(48)] // size = 4, padding = 4
		public uint interface_variable_count;

		[FieldOffset(56)] // size = 8, padding = 0
		public SpvReflectInterfaceVariable* interface_variables;

		[FieldOffset(64)] // size = 4, padding = 4
		public uint descriptor_set_count;

		[FieldOffset(72)] // size = 8, padding = 0
		public SpvReflectDescriptorSet* descriptor_sets;

		[FieldOffset(80)] // size = 4, padding = 4
		public uint used_uniform_count;

		[FieldOffset(88)] // size = 8, padding = 0
		public uint* used_uniforms;

		[FieldOffset(96)] // size = 4, padding = 4
		public uint used_push_constant_count;

		[FieldOffset(104)] // size = 8, padding = 0
		public uint* used_push_constants;

		[FieldOffset(112)] // size = 12, padding = 0
		public LocalSize local_size;

		[FieldOffset(124)] // size = 4, padding = 0
		public uint invocations;

		[FieldOffset(128)] // size = 4, padding = 4
		public uint output_vertices;
	}

	// Struct @ spirv_reflect.h:403:3
	[StructLayout(LayoutKind.Explicit, Size = 584, Pack = 8)]
	public struct SpvReflectDescriptorBinding
	{
		[FieldOffset(0)] // size = 4, padding = 4
		public uint spirv_id;

		[FieldOffset(8)] // size = 8, padding = 0
		public Runtime.CString name;

		[FieldOffset(16)] // size = 4, padding = 0
		public uint binding;

		[FieldOffset(20)] // size = 4, padding = 0
		public uint input_attachment_index;

		[FieldOffset(24)] // size = 4, padding = 0
		public uint set;

		[FieldOffset(28)] // size = 4, padding = 0
		public SpvReflectDescriptorType descriptor_type;

		[FieldOffset(32)] // size = 4, padding = 0
		public SpvReflectResourceType resource_type;

		[FieldOffset(36)] // size = 24, padding = 4
		public SpvReflectImageTraits image;

		[FieldOffset(64)] // size = 352, padding = 0
		public SpvReflectBlockVariable block;

		[FieldOffset(416)] // size = 132, padding = 0
		public SpvReflectBindingArrayTraits array;

		[FieldOffset(548)] // size = 4, padding = 0
		public uint count;

		[FieldOffset(552)] // size = 4, padding = 0
		public uint accessed;

		[FieldOffset(556)] // size = 4, padding = 0
		public uint uav_counter_id;

		[FieldOffset(560)] // size = 8, padding = 0
		public SpvReflectDescriptorBinding* uav_counter_binding;

		[FieldOffset(568)] // size = 8, padding = 0
		public SpvReflectTypeDescription* type_description;

		[FieldOffset(576)] // size = 8, padding = 0
		public SpvReflectDescriptorBinding_word_offset word_offset;

		// Struct @ spirv_reflect.h:399:3
		[StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
		public struct SpvReflectDescriptorBinding_word_offset
		{
			[FieldOffset(0)] // size = 4, padding = 0
			public uint binding;

			[FieldOffset(4)] // size = 4, padding = 0
			public uint set;
		}
	}

	// Struct @ spirv_reflect.h:412:3
	[StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
	public struct SpvReflectDescriptorSet
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint set;

		[FieldOffset(4)] // size = 4, padding = 0
		public uint binding_count;

		[FieldOffset(8)] // size = 8, padding = 0
		public SpvReflectDescriptorBinding** bindings;
	}

	// Struct @ spirv_reflect.h:355:3
	[StructLayout(LayoutKind.Explicit, Size = 368, Pack = 8)]
	public struct SpvReflectInterfaceVariable
	{
		[FieldOffset(0)] // size = 4, padding = 4
		public uint spirv_id;

		[FieldOffset(8)] // size = 8, padding = 0
		public Runtime.CString name;

		[FieldOffset(16)] // size = 4, padding = 0
		public uint location;

		[FieldOffset(20)] // size = 4, padding = 0
		public SpvStorageClass storage_class;

		[FieldOffset(24)] // size = 8, padding = 0
		public Runtime.CString semantic;

		[FieldOffset(32)] // size = 4, padding = 0
		public SpvReflectDecorationFlags decoration_flags;

		[FieldOffset(36)] // size = 4, padding = 0
		public SpvBuiltIn built_in;

		[FieldOffset(40)] // size = 24, padding = 0
		public SpvReflectNumericTraits numeric;

		[FieldOffset(64)] // size = 264, padding = 0
		public SpvReflectArrayTraits array;

		[FieldOffset(328)] // size = 4, padding = 4
		public uint member_count;

		[FieldOffset(336)] // size = 8, padding = 0
		public SpvReflectInterfaceVariable* members;

		[FieldOffset(344)] // size = 4, padding = 4
		public SpvReflectFormat format;

		[FieldOffset(352)] // size = 8, padding = 0
		public SpvReflectTypeDescription* type_description;

		[FieldOffset(360)] // size = 4, padding = 4
		public SpvReflectInterfaceVariable_word_offset word_offset;

		// Struct @ spirv_reflect.h:352:3
		[StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
		public struct SpvReflectInterfaceVariable_word_offset
		{
			[FieldOffset(0)] // size = 4, padding = 0
			public uint location;
		}
	}

	// Struct @ spirv_reflect.h:376:3
	[StructLayout(LayoutKind.Explicit, Size = 352, Pack = 8)]
	public struct SpvReflectBlockVariable
	{
		[FieldOffset(0)] // size = 4, padding = 4
		public uint spirv_id;

		[FieldOffset(8)] // size = 8, padding = 0
		public Runtime.CString name;

		[FieldOffset(16)] // size = 4, padding = 0
		public uint offset;

		[FieldOffset(20)] // size = 4, padding = 0
		public uint absolute_offset;

		[FieldOffset(24)] // size = 4, padding = 0
		public uint size;

		[FieldOffset(28)] // size = 4, padding = 0
		public uint padded_size;

		[FieldOffset(32)] // size = 4, padding = 0
		public SpvReflectDecorationFlags decoration_flags;

		[FieldOffset(36)] // size = 24, padding = 0
		public SpvReflectNumericTraits numeric;

		[FieldOffset(60)] // size = 264, padding = 0
		public SpvReflectArrayTraits array;

		[FieldOffset(324)] // size = 4, padding = 0
		public SpvReflectVariableFlags flags;

		[FieldOffset(328)] // size = 4, padding = 4
		public uint member_count;

		[FieldOffset(336)] // size = 8, padding = 0
		public SpvReflectBlockVariable* members;

		[FieldOffset(344)] // size = 8, padding = 0
		public SpvReflectTypeDescription* type_description;
	}

	// Struct @ spirv_reflect.h:476:10
	[StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
	public struct Internal
	{
		[FieldOffset(0)] // size = 4, padding = 4
		public SpvReflectModuleFlags module_flags;

		[FieldOffset(8)] // size = 8, padding = 0
		public ulong spirv_size;

		[FieldOffset(16)] // size = 8, padding = 0
		public uint* spirv_code;

		[FieldOffset(24)] // size = 4, padding = 4
		public uint spirv_word_count;

		[FieldOffset(32)] // size = 8, padding = 0
		public ulong type_description_count;

		[FieldOffset(40)] // size = 8, padding = 0
		public SpvReflectTypeDescription* type_descriptions;
	}

	// Struct @ spirv_reflect.h:439:10
	[StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
	public struct LocalSize
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint x;

		[FieldOffset(4)] // size = 4, padding = 0
		public uint y;

		[FieldOffset(8)] // size = 4, padding = 0
		public uint z;
	}

	// Struct @ spirv_reflect.h:287:3
	[StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
	public struct SpvReflectImageTraits
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public SpvDim dim;

		[FieldOffset(4)] // size = 4, padding = 0
		public uint depth;

		[FieldOffset(8)] // size = 4, padding = 0
		public uint arrayed;

		[FieldOffset(12)] // size = 4, padding = 0
		public uint ms;

		[FieldOffset(16)] // size = 4, padding = 0
		public uint sampled;

		[FieldOffset(20)] // size = 4, padding = 0
		public SpvImageFormat image_format;
	}

	// Struct @ spirv_reflect.h:302:3
	[StructLayout(LayoutKind.Explicit, Size = 132, Pack = 4)]
	public struct SpvReflectBindingArrayTraits
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint dims_count;

		[FieldOffset(4)] // size = 128, padding = 0
		public fixed uint _dims[128 / 4]; // uint32_t[32]

		public Span<uint> dims
		{
			get
			{
				fixed (SpvReflectBindingArrayTraits* @this = &this)
				{
					var pointer = &@this->_dims[0];
					var span = new Span<uint>(pointer, 32);
					return span;
				}
			}
		}
	}

	// Struct @ spirv_reflect.h:324:3
	[StructLayout(LayoutKind.Explicit, Size = 360, Pack = 8)]
	public struct SpvReflectTypeDescription
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint id;

		[FieldOffset(4)] // size = 4, padding = 0
		public SpvOp op;

		[FieldOffset(8)] // size = 8, padding = 0
		public Runtime.CString type_name;

		[FieldOffset(16)] // size = 8, padding = 0
		public Runtime.CString struct_member_name;

		[FieldOffset(24)] // size = 4, padding = 0
		public SpvStorageClass storage_class;

		[FieldOffset(28)] // size = 4, padding = 0
		public SpvReflectTypeFlags type_flags;

		[FieldOffset(32)] // size = 4, padding = 0
		public SpvReflectDecorationFlags decoration_flags;

		[FieldOffset(36)] // size = 312, padding = 0
		public Traits traits;

		[FieldOffset(348)] // size = 4, padding = 0
		public uint member_count;

		[FieldOffset(352)] // size = 8, padding = 0
		public SpvReflectTypeDescription* members;
	}

	// Struct @ spirv_reflect.h:278:3
	[StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
	public struct SpvReflectNumericTraits
	{
		[FieldOffset(0)] // size = 8, padding = 0
		public Scalar scalar;

		[FieldOffset(8)] // size = 4, padding = 0
		public Vector vector;

		[FieldOffset(12)] // size = 12, padding = 0
		public Matrix matrix;
	}

	// Struct @ spirv_reflect.h:297:3
	[StructLayout(LayoutKind.Explicit, Size = 264, Pack = 4)]
	public struct SpvReflectArrayTraits
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint dims_count;

		[FieldOffset(4)] // size = 128, padding = 0
		public fixed uint _dims[128 / 4]; // uint32_t[32]

		public Span<uint> dims
		{
			get
			{
				fixed (SpvReflectArrayTraits* @this = &this)
				{
					var pointer = &@this->_dims[0];
					var span = new Span<uint>(pointer, 32);
					return span;
				}
			}
		}

		[FieldOffset(132)] // size = 128, padding = 0
		public fixed uint _spec_constant_op_ids[128 / 4]; // uint32_t[32]

		public Span<uint> spec_constant_op_ids
		{
			get
			{
				fixed (SpvReflectArrayTraits* @this = &this)
				{
					var pointer = &@this->_spec_constant_op_ids[0];
					var span = new Span<uint>(pointer, 32);
					return span;
				}
			}
		}

		[FieldOffset(260)] // size = 4, padding = 0
		public uint stride;
	}

	// Struct @ spirv_reflect.h:316:10
	[StructLayout(LayoutKind.Explicit, Size = 312, Pack = 4)]
	public struct Traits
	{
		[FieldOffset(0)] // size = 24, padding = 0
		public SpvReflectNumericTraits numeric;

		[FieldOffset(24)] // size = 24, padding = 0
		public SpvReflectImageTraits image;

		[FieldOffset(48)] // size = 264, padding = 0
		public SpvReflectArrayTraits array;
	}

	// Struct @ spirv_reflect.h:264:10
	[StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
	public struct Scalar
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint width;

		[FieldOffset(4)] // size = 4, padding = 0
		public uint signedness;
	}

	// Struct @ spirv_reflect.h:269:10
	[StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
	public struct Vector
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint component_count;
	}

	// Struct @ spirv_reflect.h:273:10
	[StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
	public struct Matrix
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint column_count;

		[FieldOffset(4)] // size = 4, padding = 0
		public uint row_count;

		[FieldOffset(8)] // size = 4, padding = 0
		public uint stride;
	}

	// Typedef @ spirv_reflect.h:96:18
	[StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
	public struct SpvReflectModuleFlags
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint Data;

		public static implicit operator uint(SpvReflectModuleFlags data) => data.Data;
		public static implicit operator SpvReflectModuleFlags(uint data) => new() {Data = data};
	}

	// Typedef @ spirv_reflect.h:144:18
	[StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
	public struct SpvReflectDecorationFlags
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint Data;

		public static implicit operator uint(SpvReflectDecorationFlags data) => data.Data;
		public static implicit operator SpvReflectDecorationFlags(uint data) => new() {Data = data};
	}

	// Typedef @ spirv_reflect.h:196:18
	[StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
	public struct SpvReflectVariableFlags
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint Data;

		public static implicit operator uint(SpvReflectVariableFlags data) => data.Data;
		public static implicit operator SpvReflectVariableFlags(uint data) => new() {Data = data};
	}

	// Typedef @ spirv_reflect.h:119:18
	[StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
	public struct SpvReflectTypeFlags
	{
		[FieldOffset(0)] // size = 4, padding = 0
		public uint Data;

		public static implicit operator uint(SpvReflectTypeFlags data) => data.Data;
		public static implicit operator SpvReflectTypeFlags(uint data) => new() {Data = data};
	}

	// Enum @ spirv_reflect.h:77:3
	public enum SpvReflectResult : int
	{
		SPV_REFLECT_RESULT_SUCCESS = 0,
		SPV_REFLECT_RESULT_NOT_READY = 1,
		SPV_REFLECT_RESULT_ERROR_PARSE_FAILED = 2,
		SPV_REFLECT_RESULT_ERROR_ALLOC_FAILED = 3,
		SPV_REFLECT_RESULT_ERROR_RANGE_EXCEEDED = 4,
		SPV_REFLECT_RESULT_ERROR_NULL_POINTER = 5,
		SPV_REFLECT_RESULT_ERROR_INTERNAL_ERROR = 6,
		SPV_REFLECT_RESULT_ERROR_COUNT_MISMATCH = 7,
		SPV_REFLECT_RESULT_ERROR_ELEMENT_NOT_FOUND = 8,
		SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_CODE_SIZE = 9,
		SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_MAGIC_NUMBER = 10,
		SPV_REFLECT_RESULT_ERROR_SPIRV_UNEXPECTED_EOF = 11,
		SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_ID_REFERENCE = 12,
		SPV_REFLECT_RESULT_ERROR_SPIRV_SET_NUMBER_OVERFLOW = 13,
		SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_STORAGE_CLASS = 14,
		SPV_REFLECT_RESULT_ERROR_SPIRV_RECURSION = 15,
		SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_INSTRUCTION = 16,
		SPV_REFLECT_RESULT_ERROR_SPIRV_UNEXPECTED_BLOCK_DATA = 17,
		SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_BLOCK_MEMBER_REFERENCE = 18,
		SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_ENTRY_POINT = 19,
		SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_EXECUTION_MODE = 20
	}

	// Enum @ spirv.h:74:3 (include\spirv\unified1\spirv.h)
	public enum SpvSourceLanguage : int
	{
		SpvSourceLanguageUnknown = 0,
		SpvSourceLanguageESSL = 1,
		SpvSourceLanguageGLSL = 2,
		SpvSourceLanguageOpenCL_C = 3,
		SpvSourceLanguageOpenCL_CPP = 4,
		SpvSourceLanguageHLSL = 5,
		SpvSourceLanguageCPP_for_OpenCL = 6,
		SpvSourceLanguageMax = 2147483647
	}

	// Enum @ spirv_reflect.h:251:3
	public enum SpvReflectGenerator : int
	{
		SPV_REFLECT_GENERATOR_KHRONOS_LLVM_SPIRV_TRANSLATOR = 6,
		SPV_REFLECT_GENERATOR_KHRONOS_SPIRV_TOOLS_ASSEMBLER = 7,
		SPV_REFLECT_GENERATOR_KHRONOS_GLSLANG_REFERENCE_FRONT_END = 8,
		SPV_REFLECT_GENERATOR_GOOGLE_SHADERC_OVER_GLSLANG = 13,
		SPV_REFLECT_GENERATOR_GOOGLE_SPIREGG = 14,
		SPV_REFLECT_GENERATOR_GOOGLE_RSPIRV = 15,
		SPV_REFLECT_GENERATOR_X_LEGEND_MESA_MESAIR_SPIRV_TRANSLATOR = 16,
		SPV_REFLECT_GENERATOR_KHRONOS_SPIRV_TOOLS_LINKER = 17,
		SPV_REFLECT_GENERATOR_WINE_VKD3D_SHADER_COMPILER = 18,
		SPV_REFLECT_GENERATOR_CLAY_CLAY_SHADER_COMPILER = 19
	}

	// Enum @ spirv.h:99:3 (include\spirv\unified1\spirv.h)
	public enum SpvExecutionModel : int
	{
		SpvExecutionModelVertex = 0,
		SpvExecutionModelTessellationControl = 1,
		SpvExecutionModelTessellationEvaluation = 2,
		SpvExecutionModelGeometry = 3,
		SpvExecutionModelFragment = 4,
		SpvExecutionModelGLCompute = 5,
		SpvExecutionModelKernel = 6,
		SpvExecutionModelTaskNV = 5267,
		SpvExecutionModelMeshNV = 5268,
		SpvExecutionModelRayGenerationKHR = 5313,
		// SpvExecutionModelRayGenerationNV = 5313,
		SpvExecutionModelIntersectionKHR = 5314,
		// SpvExecutionModelIntersectionNV = 5314,
		SpvExecutionModelAnyHitKHR = 5315,
		// SpvExecutionModelAnyHitNV = 5315,
		SpvExecutionModelClosestHitKHR = 5316,
		// SpvExecutionModelClosestHitNV = 5316,
		SpvExecutionModelMissKHR = 5317,
		// SpvExecutionModelMissNV = 5317,
		SpvExecutionModelCallableKHR = 5318,
		// SpvExecutionModelCallableNV = 5318,
		SpvExecutionModelMax = 2147483647
	}

	// Enum @ spirv_reflect.h:235:3
	public enum SpvReflectShaderStageFlagBits : int
	{
		SPV_REFLECT_SHADER_STAGE_VERTEX_BIT = 1,
		SPV_REFLECT_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
		SPV_REFLECT_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
		SPV_REFLECT_SHADER_STAGE_GEOMETRY_BIT = 8,
		SPV_REFLECT_SHADER_STAGE_FRAGMENT_BIT = 16,
		SPV_REFLECT_SHADER_STAGE_COMPUTE_BIT = 32,
		SPV_REFLECT_SHADER_STAGE_TASK_BIT_NV = 64,
		SPV_REFLECT_SHADER_STAGE_MESH_BIT_NV = 128,
		SPV_REFLECT_SHADER_STAGE_RAYGEN_BIT_KHR = 256,
		SPV_REFLECT_SHADER_STAGE_ANY_HIT_BIT_KHR = 512,
		SPV_REFLECT_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024,
		SPV_REFLECT_SHADER_STAGE_MISS_BIT_KHR = 2048,
		SPV_REFLECT_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096,
		SPV_REFLECT_SHADER_STAGE_CALLABLE_BIT_KHR = 8192
	}

	// Enum @ spirv_reflect.h:214:3
	public enum SpvReflectDescriptorType : int
	{
		SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLER = 0,
		SPV_REFLECT_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
		SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
		SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
		SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
		SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
		SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
		SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
		SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
		SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
		SPV_REFLECT_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
		SPV_REFLECT_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
	}

	// Enum @ spirv_reflect.h:155:3
	public enum SpvReflectResourceType : int
	{
		SPV_REFLECT_RESOURCE_FLAG_UNDEFINED = 0,
		SPV_REFLECT_RESOURCE_FLAG_SAMPLER = 1,
		SPV_REFLECT_RESOURCE_FLAG_CBV = 2,
		SPV_REFLECT_RESOURCE_FLAG_SRV = 4,
		SPV_REFLECT_RESOURCE_FLAG_UAV = 8
	}

	// Enum @ spirv.h:222:3 (include\spirv\unified1\spirv.h)
	public enum SpvStorageClass : int
	{
		SpvStorageClassUniformConstant = 0,
		SpvStorageClassInput = 1,
		SpvStorageClassUniform = 2,
		SpvStorageClassOutput = 3,
		SpvStorageClassWorkgroup = 4,
		SpvStorageClassCrossWorkgroup = 5,
		SpvStorageClassPrivate = 6,
		SpvStorageClassFunction = 7,
		SpvStorageClassGeneric = 8,
		SpvStorageClassPushConstant = 9,
		SpvStorageClassAtomicCounter = 10,
		SpvStorageClassImage = 11,
		SpvStorageClassStorageBuffer = 12,
		SpvStorageClassCallableDataKHR = 5328,
		// SpvStorageClassCallableDataNV = 5328,
		SpvStorageClassIncomingCallableDataKHR = 5329,
		// SpvStorageClassIncomingCallableDataNV = 5329,
		SpvStorageClassRayPayloadKHR = 5338,
		// SpvStorageClassRayPayloadNV = 5338,
		SpvStorageClassHitAttributeKHR = 5339,
		// SpvStorageClassHitAttributeNV = 5339,
		SpvStorageClassIncomingRayPayloadKHR = 5342,
		// SpvStorageClassIncomingRayPayloadNV = 5342,
		SpvStorageClassShaderRecordBufferKHR = 5343,
		// SpvStorageClassShaderRecordBufferNV = 5343,
		// SpvStorageClassPhysicalStorageBuffer = 5349,
		SpvStorageClassPhysicalStorageBufferEXT = 5349,
		SpvStorageClassCodeSectionINTEL = 5605,
		SpvStorageClassDeviceOnlyINTEL = 5936,
		SpvStorageClassHostOnlyINTEL = 5937,
		SpvStorageClassMax = 2147483647
	}

	// Enum @ spirv.h:681:3 (include\spirv\unified1\spirv.h)
	public enum SpvBuiltIn : int
	{
		SpvBuiltInPosition = 0,
		SpvBuiltInPointSize = 1,
		SpvBuiltInClipDistance = 3,
		SpvBuiltInCullDistance = 4,
		SpvBuiltInVertexId = 5,
		SpvBuiltInInstanceId = 6,
		SpvBuiltInPrimitiveId = 7,
		SpvBuiltInInvocationId = 8,
		SpvBuiltInLayer = 9,
		SpvBuiltInViewportIndex = 10,
		SpvBuiltInTessLevelOuter = 11,
		SpvBuiltInTessLevelInner = 12,
		SpvBuiltInTessCoord = 13,
		SpvBuiltInPatchVertices = 14,
		SpvBuiltInFragCoord = 15,
		SpvBuiltInPointCoord = 16,
		SpvBuiltInFrontFacing = 17,
		SpvBuiltInSampleId = 18,
		SpvBuiltInSamplePosition = 19,
		SpvBuiltInSampleMask = 20,
		SpvBuiltInFragDepth = 22,
		SpvBuiltInHelperInvocation = 23,
		SpvBuiltInNumWorkgroups = 24,
		SpvBuiltInWorkgroupSize = 25,
		SpvBuiltInWorkgroupId = 26,
		SpvBuiltInLocalInvocationId = 27,
		SpvBuiltInGlobalInvocationId = 28,
		SpvBuiltInLocalInvocationIndex = 29,
		SpvBuiltInWorkDim = 30,
		SpvBuiltInGlobalSize = 31,
		SpvBuiltInEnqueuedWorkgroupSize = 32,
		SpvBuiltInGlobalOffset = 33,
		SpvBuiltInGlobalLinearId = 34,
		SpvBuiltInSubgroupSize = 36,
		SpvBuiltInSubgroupMaxSize = 37,
		SpvBuiltInNumSubgroups = 38,
		SpvBuiltInNumEnqueuedSubgroups = 39,
		SpvBuiltInSubgroupId = 40,
		SpvBuiltInSubgroupLocalInvocationId = 41,
		SpvBuiltInVertexIndex = 42,
		SpvBuiltInInstanceIndex = 43,
		SpvBuiltInSubgroupEqMask = 4416,
		// SpvBuiltInSubgroupEqMaskKHR = 4416,
		SpvBuiltInSubgroupGeMask = 4417,
		// SpvBuiltInSubgroupGeMaskKHR = 4417,
		SpvBuiltInSubgroupGtMask = 4418,
		// SpvBuiltInSubgroupGtMaskKHR = 4418,
		SpvBuiltInSubgroupLeMask = 4419,
		// SpvBuiltInSubgroupLeMaskKHR = 4419,
		SpvBuiltInSubgroupLtMask = 4420,
		// SpvBuiltInSubgroupLtMaskKHR = 4420,
		SpvBuiltInBaseVertex = 4424,
		SpvBuiltInBaseInstance = 4425,
		SpvBuiltInDrawIndex = 4426,
		SpvBuiltInPrimitiveShadingRateKHR = 4432,
		SpvBuiltInDeviceIndex = 4438,
		SpvBuiltInViewIndex = 4440,
		SpvBuiltInShadingRateKHR = 4444,
		SpvBuiltInBaryCoordNoPerspAMD = 4992,
		SpvBuiltInBaryCoordNoPerspCentroidAMD = 4993,
		SpvBuiltInBaryCoordNoPerspSampleAMD = 4994,
		SpvBuiltInBaryCoordSmoothAMD = 4995,
		SpvBuiltInBaryCoordSmoothCentroidAMD = 4996,
		SpvBuiltInBaryCoordSmoothSampleAMD = 4997,
		SpvBuiltInBaryCoordPullModelAMD = 4998,
		SpvBuiltInFragStencilRefEXT = 5014,
		SpvBuiltInViewportMaskNV = 5253,
		SpvBuiltInSecondaryPositionNV = 5257,
		SpvBuiltInSecondaryViewportMaskNV = 5258,
		SpvBuiltInPositionPerViewNV = 5261,
		SpvBuiltInViewportMaskPerViewNV = 5262,
		SpvBuiltInFullyCoveredEXT = 5264,
		SpvBuiltInTaskCountNV = 5274,
		SpvBuiltInPrimitiveCountNV = 5275,
		SpvBuiltInPrimitiveIndicesNV = 5276,
		SpvBuiltInClipDistancePerViewNV = 5277,
		SpvBuiltInCullDistancePerViewNV = 5278,
		SpvBuiltInLayerPerViewNV = 5279,
		SpvBuiltInMeshViewCountNV = 5280,
		SpvBuiltInMeshViewIndicesNV = 5281,
		SpvBuiltInBaryCoordKHR = 5286,
		// SpvBuiltInBaryCoordNV = 5286,
		SpvBuiltInBaryCoordNoPerspKHR = 5287,
		// SpvBuiltInBaryCoordNoPerspNV = 5287,
		SpvBuiltInFragSizeEXT = 5292,
		// SpvBuiltInFragmentSizeNV = 5292,
		SpvBuiltInFragInvocationCountEXT = 5293,
		// SpvBuiltInInvocationsPerPixelNV = 5293,
		SpvBuiltInLaunchIdKHR = 5319,
		// SpvBuiltInLaunchIdNV = 5319,
		SpvBuiltInLaunchSizeKHR = 5320,
		// SpvBuiltInLaunchSizeNV = 5320,
		SpvBuiltInWorldRayOriginKHR = 5321,
		// SpvBuiltInWorldRayOriginNV = 5321,
		SpvBuiltInWorldRayDirectionKHR = 5322,
		// SpvBuiltInWorldRayDirectionNV = 5322,
		SpvBuiltInObjectRayOriginKHR = 5323,
		// SpvBuiltInObjectRayOriginNV = 5323,
		SpvBuiltInObjectRayDirectionKHR = 5324,
		// SpvBuiltInObjectRayDirectionNV = 5324,
		SpvBuiltInRayTminKHR = 5325,
		// SpvBuiltInRayTminNV = 5325,
		SpvBuiltInRayTmaxKHR = 5326,
		// SpvBuiltInRayTmaxNV = 5326,
		SpvBuiltInInstanceCustomIndexKHR = 5327,
		// SpvBuiltInInstanceCustomIndexNV = 5327,
		SpvBuiltInObjectToWorldKHR = 5330,
		// SpvBuiltInObjectToWorldNV = 5330,
		SpvBuiltInWorldToObjectKHR = 5331,
		// SpvBuiltInWorldToObjectNV = 5331,
		SpvBuiltInHitTNV = 5332,
		SpvBuiltInHitKindKHR = 5333,
		// SpvBuiltInHitKindNV = 5333,
		SpvBuiltInCurrentRayTimeNV = 5334,
		SpvBuiltInIncomingRayFlagsKHR = 5351,
		// SpvBuiltInIncomingRayFlagsNV = 5351,
		SpvBuiltInRayGeometryIndexKHR = 5352,
		SpvBuiltInWarpsPerSMNV = 5374,
		SpvBuiltInSMCountNV = 5375,
		SpvBuiltInWarpIDNV = 5376,
		SpvBuiltInSMIDNV = 5377,
		SpvBuiltInMax = 2147483647
	}

	// Enum @ spirv_reflect.h:186:3
	public enum SpvReflectFormat : int
	{
		SPV_REFLECT_FORMAT_UNDEFINED = 0,
		SPV_REFLECT_FORMAT_R4G4_UNORM_PACK8 = 1,
		SPV_REFLECT_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
		SPV_REFLECT_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
		SPV_REFLECT_FORMAT_R5G6B5_UNORM_PACK16 = 4,
		SPV_REFLECT_FORMAT_B5G6R5_UNORM_PACK16 = 5,
		SPV_REFLECT_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
		SPV_REFLECT_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
		SPV_REFLECT_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
		SPV_REFLECT_FORMAT_R8_UNORM = 9,
		SPV_REFLECT_FORMAT_R8_SNORM = 10,
		SPV_REFLECT_FORMAT_R8_USCALED = 11,
		SPV_REFLECT_FORMAT_R8_SSCALED = 12,
		SPV_REFLECT_FORMAT_R8_UINT = 13,
		SPV_REFLECT_FORMAT_R8_SINT = 14,
		SPV_REFLECT_FORMAT_R8_SRGB = 15,
		SPV_REFLECT_FORMAT_R8G8_UNORM = 16,
		SPV_REFLECT_FORMAT_R8G8_SNORM = 17,
		SPV_REFLECT_FORMAT_R8G8_USCALED = 18,
		SPV_REFLECT_FORMAT_R8G8_SSCALED = 19,
		SPV_REFLECT_FORMAT_R8G8_UINT = 20,
		SPV_REFLECT_FORMAT_R8G8_SINT = 21,
		SPV_REFLECT_FORMAT_R8G8_SRGB = 22,
		SPV_REFLECT_FORMAT_R8G8B8_UNORM = 23,
		SPV_REFLECT_FORMAT_R8G8B8_SNORM = 24,
		SPV_REFLECT_FORMAT_R8G8B8_USCALED = 25,
		SPV_REFLECT_FORMAT_R8G8B8_SSCALED = 26,
		SPV_REFLECT_FORMAT_R8G8B8_UINT = 27,
		SPV_REFLECT_FORMAT_R8G8B8_SINT = 28,
		SPV_REFLECT_FORMAT_R8G8B8_SRGB = 29,
		SPV_REFLECT_FORMAT_B8G8R8_UNORM = 30,
		SPV_REFLECT_FORMAT_B8G8R8_SNORM = 31,
		SPV_REFLECT_FORMAT_B8G8R8_USCALED = 32,
		SPV_REFLECT_FORMAT_B8G8R8_SSCALED = 33,
		SPV_REFLECT_FORMAT_B8G8R8_UINT = 34,
		SPV_REFLECT_FORMAT_B8G8R8_SINT = 35,
		SPV_REFLECT_FORMAT_B8G8R8_SRGB = 36,
		SPV_REFLECT_FORMAT_R8G8B8A8_UNORM = 37,
		SPV_REFLECT_FORMAT_R8G8B8A8_SNORM = 38,
		SPV_REFLECT_FORMAT_R8G8B8A8_USCALED = 39,
		SPV_REFLECT_FORMAT_R8G8B8A8_SSCALED = 40,
		SPV_REFLECT_FORMAT_R8G8B8A8_UINT = 41,
		SPV_REFLECT_FORMAT_R8G8B8A8_SINT = 42,
		SPV_REFLECT_FORMAT_R8G8B8A8_SRGB = 43,
		SPV_REFLECT_FORMAT_B8G8R8A8_UNORM = 44,
		SPV_REFLECT_FORMAT_B8G8R8A8_SNORM = 45,
		SPV_REFLECT_FORMAT_B8G8R8A8_USCALED = 46,
		SPV_REFLECT_FORMAT_B8G8R8A8_SSCALED = 47,
		SPV_REFLECT_FORMAT_B8G8R8A8_UINT = 48,
		SPV_REFLECT_FORMAT_B8G8R8A8_SINT = 49,
		SPV_REFLECT_FORMAT_B8G8R8A8_SRGB = 50,
		SPV_REFLECT_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
		SPV_REFLECT_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
		SPV_REFLECT_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
		SPV_REFLECT_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
		SPV_REFLECT_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
		SPV_REFLECT_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
		SPV_REFLECT_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
		SPV_REFLECT_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
		SPV_REFLECT_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
		SPV_REFLECT_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
		SPV_REFLECT_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
		SPV_REFLECT_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
		SPV_REFLECT_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
		SPV_REFLECT_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
		SPV_REFLECT_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
		SPV_REFLECT_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
		SPV_REFLECT_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
		SPV_REFLECT_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
		SPV_REFLECT_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
		SPV_REFLECT_FORMAT_R16_UNORM = 70,
		SPV_REFLECT_FORMAT_R16_SNORM = 71,
		SPV_REFLECT_FORMAT_R16_USCALED = 72,
		SPV_REFLECT_FORMAT_R16_SSCALED = 73,
		SPV_REFLECT_FORMAT_R16_UINT = 74,
		SPV_REFLECT_FORMAT_R16_SINT = 75,
		SPV_REFLECT_FORMAT_R16_SFLOAT = 76,
		SPV_REFLECT_FORMAT_R16G16_UNORM = 77,
		SPV_REFLECT_FORMAT_R16G16_SNORM = 78,
		SPV_REFLECT_FORMAT_R16G16_USCALED = 79,
		SPV_REFLECT_FORMAT_R16G16_SSCALED = 80,
		SPV_REFLECT_FORMAT_R16G16_UINT = 81,
		SPV_REFLECT_FORMAT_R16G16_SINT = 82,
		SPV_REFLECT_FORMAT_R16G16_SFLOAT = 83,
		SPV_REFLECT_FORMAT_R16G16B16_UNORM = 84,
		SPV_REFLECT_FORMAT_R16G16B16_SNORM = 85,
		SPV_REFLECT_FORMAT_R16G16B16_USCALED = 86,
		SPV_REFLECT_FORMAT_R16G16B16_SSCALED = 87,
		SPV_REFLECT_FORMAT_R16G16B16_UINT = 88,
		SPV_REFLECT_FORMAT_R16G16B16_SINT = 89,
		SPV_REFLECT_FORMAT_R16G16B16_SFLOAT = 90,
		SPV_REFLECT_FORMAT_R16G16B16A16_UNORM = 91,
		SPV_REFLECT_FORMAT_R16G16B16A16_SNORM = 92,
		SPV_REFLECT_FORMAT_R16G16B16A16_USCALED = 93,
		SPV_REFLECT_FORMAT_R16G16B16A16_SSCALED = 94,
		SPV_REFLECT_FORMAT_R16G16B16A16_UINT = 95,
		SPV_REFLECT_FORMAT_R16G16B16A16_SINT = 96,
		SPV_REFLECT_FORMAT_R16G16B16A16_SFLOAT = 97,
		SPV_REFLECT_FORMAT_R32_UINT = 98,
		SPV_REFLECT_FORMAT_R32_SINT = 99,
		SPV_REFLECT_FORMAT_R32_SFLOAT = 100,
		SPV_REFLECT_FORMAT_R32G32_UINT = 101,
		SPV_REFLECT_FORMAT_R32G32_SINT = 102,
		SPV_REFLECT_FORMAT_R32G32_SFLOAT = 103,
		SPV_REFLECT_FORMAT_R32G32B32_UINT = 104,
		SPV_REFLECT_FORMAT_R32G32B32_SINT = 105,
		SPV_REFLECT_FORMAT_R32G32B32_SFLOAT = 106,
		SPV_REFLECT_FORMAT_R32G32B32A32_UINT = 107,
		SPV_REFLECT_FORMAT_R32G32B32A32_SINT = 108,
		SPV_REFLECT_FORMAT_R32G32B32A32_SFLOAT = 109,
		SPV_REFLECT_FORMAT_R64_UINT = 110,
		SPV_REFLECT_FORMAT_R64_SINT = 111,
		SPV_REFLECT_FORMAT_R64_SFLOAT = 112,
		SPV_REFLECT_FORMAT_R64G64_UINT = 113,
		SPV_REFLECT_FORMAT_R64G64_SINT = 114,
		SPV_REFLECT_FORMAT_R64G64_SFLOAT = 115,
		SPV_REFLECT_FORMAT_R64G64B64_UINT = 116,
		SPV_REFLECT_FORMAT_R64G64B64_SINT = 117,
		SPV_REFLECT_FORMAT_R64G64B64_SFLOAT = 118,
		SPV_REFLECT_FORMAT_R64G64B64A64_UINT = 119,
		SPV_REFLECT_FORMAT_R64G64B64A64_SINT = 120,
		SPV_REFLECT_FORMAT_R64G64B64A64_SFLOAT = 121
	}

	// Enum @ spirv.h:233:3 (include\spirv\unified1\spirv.h)
	public enum SpvDim : int
	{
		SpvDim1D = 0,
		SpvDim2D = 1,
		SpvDim3D = 2,
		SpvDimCube = 3,
		SpvDimRect = 4,
		SpvDimBuffer = 5,
		SpvDimSubpassData = 6,
		SpvDimMax = 2147483647
	}

	// Enum @ spirv.h:294:3 (include\spirv\unified1\spirv.h)
	public enum SpvImageFormat : int
	{
		SpvImageFormatUnknown = 0,
		SpvImageFormatRgba32f = 1,
		SpvImageFormatRgba16f = 2,
		SpvImageFormatR32f = 3,
		SpvImageFormatRgba8 = 4,
		SpvImageFormatRgba8Snorm = 5,
		SpvImageFormatRg32f = 6,
		SpvImageFormatRg16f = 7,
		SpvImageFormatR11fG11fB10f = 8,
		SpvImageFormatR16f = 9,
		SpvImageFormatRgba16 = 10,
		SpvImageFormatRgb10A2 = 11,
		SpvImageFormatRg16 = 12,
		SpvImageFormatRg8 = 13,
		SpvImageFormatR16 = 14,
		SpvImageFormatR8 = 15,
		SpvImageFormatRgba16Snorm = 16,
		SpvImageFormatRg16Snorm = 17,
		SpvImageFormatRg8Snorm = 18,
		SpvImageFormatR16Snorm = 19,
		SpvImageFormatR8Snorm = 20,
		SpvImageFormatRgba32i = 21,
		SpvImageFormatRgba16i = 22,
		SpvImageFormatRgba8i = 23,
		SpvImageFormatR32i = 24,
		SpvImageFormatRg32i = 25,
		SpvImageFormatRg16i = 26,
		SpvImageFormatRg8i = 27,
		SpvImageFormatR16i = 28,
		SpvImageFormatR8i = 29,
		SpvImageFormatRgba32ui = 30,
		SpvImageFormatRgba16ui = 31,
		SpvImageFormatRgba8ui = 32,
		SpvImageFormatR32ui = 33,
		SpvImageFormatRgb10a2ui = 34,
		SpvImageFormatRg32ui = 35,
		SpvImageFormatRg16ui = 36,
		SpvImageFormatRg8ui = 37,
		SpvImageFormatR16ui = 38,
		SpvImageFormatR8ui = 39,
		SpvImageFormatR64ui = 40,
		SpvImageFormatR64i = 41,
		SpvImageFormatMax = 2147483647
	}

	// Enum @ spirv.h:1843:3 (include\spirv\unified1\spirv.h)
	public enum SpvOp : int
	{
		SpvOpNop = 0,
		SpvOpUndef = 1,
		SpvOpSourceContinued = 2,
		SpvOpSource = 3,
		SpvOpSourceExtension = 4,
		SpvOpName = 5,
		SpvOpMemberName = 6,
		SpvOpString = 7,
		SpvOpLine = 8,
		SpvOpExtension = 10,
		SpvOpExtInstImport = 11,
		SpvOpExtInst = 12,
		SpvOpMemoryModel = 14,
		SpvOpEntryPoint = 15,
		SpvOpExecutionMode = 16,
		SpvOpCapability = 17,
		SpvOpTypeVoid = 19,
		SpvOpTypeBool = 20,
		SpvOpTypeInt = 21,
		SpvOpTypeFloat = 22,
		SpvOpTypeVector = 23,
		SpvOpTypeMatrix = 24,
		SpvOpTypeImage = 25,
		SpvOpTypeSampler = 26,
		SpvOpTypeSampledImage = 27,
		SpvOpTypeArray = 28,
		SpvOpTypeRuntimeArray = 29,
		SpvOpTypeStruct = 30,
		SpvOpTypeOpaque = 31,
		SpvOpTypePointer = 32,
		SpvOpTypeFunction = 33,
		SpvOpTypeEvent = 34,
		SpvOpTypeDeviceEvent = 35,
		SpvOpTypeReserveId = 36,
		SpvOpTypeQueue = 37,
		SpvOpTypePipe = 38,
		SpvOpTypeForwardPointer = 39,
		SpvOpConstantTrue = 41,
		SpvOpConstantFalse = 42,
		SpvOpConstant = 43,
		SpvOpConstantComposite = 44,
		SpvOpConstantSampler = 45,
		SpvOpConstantNull = 46,
		SpvOpSpecConstantTrue = 48,
		SpvOpSpecConstantFalse = 49,
		SpvOpSpecConstant = 50,
		SpvOpSpecConstantComposite = 51,
		SpvOpSpecConstantOp = 52,
		SpvOpFunction = 54,
		SpvOpFunctionParameter = 55,
		SpvOpFunctionEnd = 56,
		SpvOpFunctionCall = 57,
		SpvOpVariable = 59,
		SpvOpImageTexelPointer = 60,
		SpvOpLoad = 61,
		SpvOpStore = 62,
		SpvOpCopyMemory = 63,
		SpvOpCopyMemorySized = 64,
		SpvOpAccessChain = 65,
		SpvOpInBoundsAccessChain = 66,
		SpvOpPtrAccessChain = 67,
		SpvOpArrayLength = 68,
		SpvOpGenericPtrMemSemantics = 69,
		SpvOpInBoundsPtrAccessChain = 70,
		SpvOpDecorate = 71,
		SpvOpMemberDecorate = 72,
		SpvOpDecorationGroup = 73,
		SpvOpGroupDecorate = 74,
		SpvOpGroupMemberDecorate = 75,
		SpvOpVectorExtractDynamic = 77,
		SpvOpVectorInsertDynamic = 78,
		SpvOpVectorShuffle = 79,
		SpvOpCompositeConstruct = 80,
		SpvOpCompositeExtract = 81,
		SpvOpCompositeInsert = 82,
		SpvOpCopyObject = 83,
		SpvOpTranspose = 84,
		SpvOpSampledImage = 86,
		SpvOpImageSampleImplicitLod = 87,
		SpvOpImageSampleExplicitLod = 88,
		SpvOpImageSampleDrefImplicitLod = 89,
		SpvOpImageSampleDrefExplicitLod = 90,
		SpvOpImageSampleProjImplicitLod = 91,
		SpvOpImageSampleProjExplicitLod = 92,
		SpvOpImageSampleProjDrefImplicitLod = 93,
		SpvOpImageSampleProjDrefExplicitLod = 94,
		SpvOpImageFetch = 95,
		SpvOpImageGather = 96,
		SpvOpImageDrefGather = 97,
		SpvOpImageRead = 98,
		SpvOpImageWrite = 99,
		SpvOpImage = 100,
		SpvOpImageQueryFormat = 101,
		SpvOpImageQueryOrder = 102,
		SpvOpImageQuerySizeLod = 103,
		SpvOpImageQuerySize = 104,
		SpvOpImageQueryLod = 105,
		SpvOpImageQueryLevels = 106,
		SpvOpImageQuerySamples = 107,
		SpvOpConvertFToU = 109,
		SpvOpConvertFToS = 110,
		SpvOpConvertSToF = 111,
		SpvOpConvertUToF = 112,
		SpvOpUConvert = 113,
		SpvOpSConvert = 114,
		SpvOpFConvert = 115,
		SpvOpQuantizeToF16 = 116,
		SpvOpConvertPtrToU = 117,
		SpvOpSatConvertSToU = 118,
		SpvOpSatConvertUToS = 119,
		SpvOpConvertUToPtr = 120,
		SpvOpPtrCastToGeneric = 121,
		SpvOpGenericCastToPtr = 122,
		SpvOpGenericCastToPtrExplicit = 123,
		SpvOpBitcast = 124,
		SpvOpSNegate = 126,
		SpvOpFNegate = 127,
		SpvOpIAdd = 128,
		SpvOpFAdd = 129,
		SpvOpISub = 130,
		SpvOpFSub = 131,
		SpvOpIMul = 132,
		SpvOpFMul = 133,
		SpvOpUDiv = 134,
		SpvOpSDiv = 135,
		SpvOpFDiv = 136,
		SpvOpUMod = 137,
		SpvOpSRem = 138,
		SpvOpSMod = 139,
		SpvOpFRem = 140,
		SpvOpFMod = 141,
		SpvOpVectorTimesScalar = 142,
		SpvOpMatrixTimesScalar = 143,
		SpvOpVectorTimesMatrix = 144,
		SpvOpMatrixTimesVector = 145,
		SpvOpMatrixTimesMatrix = 146,
		SpvOpOuterProduct = 147,
		SpvOpDot = 148,
		SpvOpIAddCarry = 149,
		SpvOpISubBorrow = 150,
		SpvOpUMulExtended = 151,
		SpvOpSMulExtended = 152,
		SpvOpAny = 154,
		SpvOpAll = 155,
		SpvOpIsNan = 156,
		SpvOpIsInf = 157,
		SpvOpIsFinite = 158,
		SpvOpIsNormal = 159,
		SpvOpSignBitSet = 160,
		SpvOpLessOrGreater = 161,
		SpvOpOrdered = 162,
		SpvOpUnordered = 163,
		SpvOpLogicalEqual = 164,
		SpvOpLogicalNotEqual = 165,
		SpvOpLogicalOr = 166,
		SpvOpLogicalAnd = 167,
		SpvOpLogicalNot = 168,
		SpvOpSelect = 169,
		SpvOpIEqual = 170,
		SpvOpINotEqual = 171,
		SpvOpUGreaterThan = 172,
		SpvOpSGreaterThan = 173,
		SpvOpUGreaterThanEqual = 174,
		SpvOpSGreaterThanEqual = 175,
		SpvOpULessThan = 176,
		SpvOpSLessThan = 177,
		SpvOpULessThanEqual = 178,
		SpvOpSLessThanEqual = 179,
		SpvOpFOrdEqual = 180,
		SpvOpFUnordEqual = 181,
		SpvOpFOrdNotEqual = 182,
		SpvOpFUnordNotEqual = 183,
		SpvOpFOrdLessThan = 184,
		SpvOpFUnordLessThan = 185,
		SpvOpFOrdGreaterThan = 186,
		SpvOpFUnordGreaterThan = 187,
		SpvOpFOrdLessThanEqual = 188,
		SpvOpFUnordLessThanEqual = 189,
		SpvOpFOrdGreaterThanEqual = 190,
		SpvOpFUnordGreaterThanEqual = 191,
		SpvOpShiftRightLogical = 194,
		SpvOpShiftRightArithmetic = 195,
		SpvOpShiftLeftLogical = 196,
		SpvOpBitwiseOr = 197,
		SpvOpBitwiseXor = 198,
		SpvOpBitwiseAnd = 199,
		SpvOpNot = 200,
		SpvOpBitFieldInsert = 201,
		SpvOpBitFieldSExtract = 202,
		SpvOpBitFieldUExtract = 203,
		SpvOpBitReverse = 204,
		SpvOpBitCount = 205,
		SpvOpDPdx = 207,
		SpvOpDPdy = 208,
		SpvOpFwidth = 209,
		SpvOpDPdxFine = 210,
		SpvOpDPdyFine = 211,
		SpvOpFwidthFine = 212,
		SpvOpDPdxCoarse = 213,
		SpvOpDPdyCoarse = 214,
		SpvOpFwidthCoarse = 215,
		SpvOpEmitVertex = 218,
		SpvOpEndPrimitive = 219,
		SpvOpEmitStreamVertex = 220,
		SpvOpEndStreamPrimitive = 221,
		SpvOpControlBarrier = 224,
		SpvOpMemoryBarrier = 225,
		SpvOpAtomicLoad = 227,
		SpvOpAtomicStore = 228,
		SpvOpAtomicExchange = 229,
		SpvOpAtomicCompareExchange = 230,
		SpvOpAtomicCompareExchangeWeak = 231,
		SpvOpAtomicIIncrement = 232,
		SpvOpAtomicIDecrement = 233,
		SpvOpAtomicIAdd = 234,
		SpvOpAtomicISub = 235,
		SpvOpAtomicSMin = 236,
		SpvOpAtomicUMin = 237,
		SpvOpAtomicSMax = 238,
		SpvOpAtomicUMax = 239,
		SpvOpAtomicAnd = 240,
		SpvOpAtomicOr = 241,
		SpvOpAtomicXor = 242,
		SpvOpPhi = 245,
		SpvOpLoopMerge = 246,
		SpvOpSelectionMerge = 247,
		SpvOpLabel = 248,
		SpvOpBranch = 249,
		SpvOpBranchConditional = 250,
		SpvOpSwitch = 251,
		SpvOpKill = 252,
		SpvOpReturn = 253,
		SpvOpReturnValue = 254,
		SpvOpUnreachable = 255,
		SpvOpLifetimeStart = 256,
		SpvOpLifetimeStop = 257,
		SpvOpGroupAsyncCopy = 259,
		SpvOpGroupWaitEvents = 260,
		SpvOpGroupAll = 261,
		SpvOpGroupAny = 262,
		SpvOpGroupBroadcast = 263,
		SpvOpGroupIAdd = 264,
		SpvOpGroupFAdd = 265,
		SpvOpGroupFMin = 266,
		SpvOpGroupUMin = 267,
		SpvOpGroupSMin = 268,
		SpvOpGroupFMax = 269,
		SpvOpGroupUMax = 270,
		SpvOpGroupSMax = 271,
		SpvOpReadPipe = 274,
		SpvOpWritePipe = 275,
		SpvOpReservedReadPipe = 276,
		SpvOpReservedWritePipe = 277,
		SpvOpReserveReadPipePackets = 278,
		SpvOpReserveWritePipePackets = 279,
		SpvOpCommitReadPipe = 280,
		SpvOpCommitWritePipe = 281,
		SpvOpIsValidReserveId = 282,
		SpvOpGetNumPipePackets = 283,
		SpvOpGetMaxPipePackets = 284,
		SpvOpGroupReserveReadPipePackets = 285,
		SpvOpGroupReserveWritePipePackets = 286,
		SpvOpGroupCommitReadPipe = 287,
		SpvOpGroupCommitWritePipe = 288,
		SpvOpEnqueueMarker = 291,
		SpvOpEnqueueKernel = 292,
		SpvOpGetKernelNDrangeSubGroupCount = 293,
		SpvOpGetKernelNDrangeMaxSubGroupSize = 294,
		SpvOpGetKernelWorkGroupSize = 295,
		SpvOpGetKernelPreferredWorkGroupSizeMultiple = 296,
		SpvOpRetainEvent = 297,
		SpvOpReleaseEvent = 298,
		SpvOpCreateUserEvent = 299,
		SpvOpIsValidEvent = 300,
		SpvOpSetUserEventStatus = 301,
		SpvOpCaptureEventProfilingInfo = 302,
		SpvOpGetDefaultQueue = 303,
		SpvOpBuildNDRange = 304,
		SpvOpImageSparseSampleImplicitLod = 305,
		SpvOpImageSparseSampleExplicitLod = 306,
		SpvOpImageSparseSampleDrefImplicitLod = 307,
		SpvOpImageSparseSampleDrefExplicitLod = 308,
		SpvOpImageSparseSampleProjImplicitLod = 309,
		SpvOpImageSparseSampleProjExplicitLod = 310,
		SpvOpImageSparseSampleProjDrefImplicitLod = 311,
		SpvOpImageSparseSampleProjDrefExplicitLod = 312,
		SpvOpImageSparseFetch = 313,
		SpvOpImageSparseGather = 314,
		SpvOpImageSparseDrefGather = 315,
		SpvOpImageSparseTexelsResident = 316,
		SpvOpNoLine = 317,
		SpvOpAtomicFlagTestAndSet = 318,
		SpvOpAtomicFlagClear = 319,
		SpvOpImageSparseRead = 320,
		SpvOpSizeOf = 321,
		SpvOpTypePipeStorage = 322,
		SpvOpConstantPipeStorage = 323,
		SpvOpCreatePipeFromPipeStorage = 324,
		SpvOpGetKernelLocalSizeForSubgroupCount = 325,
		SpvOpGetKernelMaxNumSubgroups = 326,
		SpvOpTypeNamedBarrier = 327,
		SpvOpNamedBarrierInitialize = 328,
		SpvOpMemoryNamedBarrier = 329,
		SpvOpModuleProcessed = 330,
		SpvOpExecutionModeId = 331,
		SpvOpDecorateId = 332,
		SpvOpGroupNonUniformElect = 333,
		SpvOpGroupNonUniformAll = 334,
		SpvOpGroupNonUniformAny = 335,
		SpvOpGroupNonUniformAllEqual = 336,
		SpvOpGroupNonUniformBroadcast = 337,
		SpvOpGroupNonUniformBroadcastFirst = 338,
		SpvOpGroupNonUniformBallot = 339,
		SpvOpGroupNonUniformInverseBallot = 340,
		SpvOpGroupNonUniformBallotBitExtract = 341,
		SpvOpGroupNonUniformBallotBitCount = 342,
		SpvOpGroupNonUniformBallotFindLSB = 343,
		SpvOpGroupNonUniformBallotFindMSB = 344,
		SpvOpGroupNonUniformShuffle = 345,
		SpvOpGroupNonUniformShuffleXor = 346,
		SpvOpGroupNonUniformShuffleUp = 347,
		SpvOpGroupNonUniformShuffleDown = 348,
		SpvOpGroupNonUniformIAdd = 349,
		SpvOpGroupNonUniformFAdd = 350,
		SpvOpGroupNonUniformIMul = 351,
		SpvOpGroupNonUniformFMul = 352,
		SpvOpGroupNonUniformSMin = 353,
		SpvOpGroupNonUniformUMin = 354,
		SpvOpGroupNonUniformFMin = 355,
		SpvOpGroupNonUniformSMax = 356,
		SpvOpGroupNonUniformUMax = 357,
		SpvOpGroupNonUniformFMax = 358,
		SpvOpGroupNonUniformBitwiseAnd = 359,
		SpvOpGroupNonUniformBitwiseOr = 360,
		SpvOpGroupNonUniformBitwiseXor = 361,
		SpvOpGroupNonUniformLogicalAnd = 362,
		SpvOpGroupNonUniformLogicalOr = 363,
		SpvOpGroupNonUniformLogicalXor = 364,
		SpvOpGroupNonUniformQuadBroadcast = 365,
		SpvOpGroupNonUniformQuadSwap = 366,
		SpvOpCopyLogical = 400,
		SpvOpPtrEqual = 401,
		SpvOpPtrNotEqual = 402,
		SpvOpPtrDiff = 403,
		SpvOpTerminateInvocation = 4416,
		SpvOpSubgroupBallotKHR = 4421,
		SpvOpSubgroupFirstInvocationKHR = 4422,
		SpvOpSubgroupAllKHR = 4428,
		SpvOpSubgroupAnyKHR = 4429,
		SpvOpSubgroupAllEqualKHR = 4430,
		SpvOpSubgroupReadInvocationKHR = 4432,
		SpvOpTraceRayKHR = 4445,
		SpvOpExecuteCallableKHR = 4446,
		SpvOpConvertUToAccelerationStructureKHR = 4447,
		SpvOpIgnoreIntersectionKHR = 4448,
		SpvOpTerminateRayKHR = 4449,
		SpvOpSDot = 4450,
		// SpvOpSDotKHR = 4450,
		SpvOpUDot = 4451,
		// SpvOpUDotKHR = 4451,
		SpvOpSUDot = 4452,
		// SpvOpSUDotKHR = 4452,
		SpvOpSDotAccSat = 4453,
		// SpvOpSDotAccSatKHR = 4453,
		SpvOpUDotAccSat = 4454,
		// SpvOpUDotAccSatKHR = 4454,
		SpvOpSUDotAccSat = 4455,
		// SpvOpSUDotAccSatKHR = 4455,
		SpvOpTypeRayQueryKHR = 4472,
		SpvOpRayQueryInitializeKHR = 4473,
		SpvOpRayQueryTerminateKHR = 4474,
		SpvOpRayQueryGenerateIntersectionKHR = 4475,
		SpvOpRayQueryConfirmIntersectionKHR = 4476,
		SpvOpRayQueryProceedKHR = 4477,
		SpvOpRayQueryGetIntersectionTypeKHR = 4479,
		SpvOpGroupIAddNonUniformAMD = 5000,
		SpvOpGroupFAddNonUniformAMD = 5001,
		SpvOpGroupFMinNonUniformAMD = 5002,
		SpvOpGroupUMinNonUniformAMD = 5003,
		SpvOpGroupSMinNonUniformAMD = 5004,
		SpvOpGroupFMaxNonUniformAMD = 5005,
		SpvOpGroupUMaxNonUniformAMD = 5006,
		SpvOpGroupSMaxNonUniformAMD = 5007,
		SpvOpFragmentMaskFetchAMD = 5011,
		SpvOpFragmentFetchAMD = 5012,
		SpvOpReadClockKHR = 5056,
		SpvOpImageSampleFootprintNV = 5283,
		SpvOpGroupNonUniformPartitionNV = 5296,
		SpvOpWritePackedPrimitiveIndices4x8NV = 5299,
		SpvOpReportIntersectionKHR = 5334,
		// SpvOpReportIntersectionNV = 5334,
		SpvOpIgnoreIntersectionNV = 5335,
		SpvOpTerminateRayNV = 5336,
		SpvOpTraceNV = 5337,
		SpvOpTraceMotionNV = 5338,
		SpvOpTraceRayMotionNV = 5339,
		SpvOpTypeAccelerationStructureKHR = 5341,
		// SpvOpTypeAccelerationStructureNV = 5341,
		SpvOpExecuteCallableNV = 5344,
		SpvOpTypeCooperativeMatrixNV = 5358,
		SpvOpCooperativeMatrixLoadNV = 5359,
		SpvOpCooperativeMatrixStoreNV = 5360,
		SpvOpCooperativeMatrixMulAddNV = 5361,
		SpvOpCooperativeMatrixLengthNV = 5362,
		SpvOpBeginInvocationInterlockEXT = 5364,
		SpvOpEndInvocationInterlockEXT = 5365,
		SpvOpDemoteToHelperInvocation = 5380,
		// SpvOpDemoteToHelperInvocationEXT = 5380,
		SpvOpIsHelperInvocationEXT = 5381,
		SpvOpConvertUToImageNV = 5391,
		SpvOpConvertUToSamplerNV = 5392,
		SpvOpConvertImageToUNV = 5393,
		SpvOpConvertSamplerToUNV = 5394,
		SpvOpConvertUToSampledImageNV = 5395,
		SpvOpConvertSampledImageToUNV = 5396,
		SpvOpSamplerImageAddressingModeNV = 5397,
		SpvOpSubgroupShuffleINTEL = 5571,
		SpvOpSubgroupShuffleDownINTEL = 5572,
		SpvOpSubgroupShuffleUpINTEL = 5573,
		SpvOpSubgroupShuffleXorINTEL = 5574,
		SpvOpSubgroupBlockReadINTEL = 5575,
		SpvOpSubgroupBlockWriteINTEL = 5576,
		SpvOpSubgroupImageBlockReadINTEL = 5577,
		SpvOpSubgroupImageBlockWriteINTEL = 5578,
		SpvOpSubgroupImageMediaBlockReadINTEL = 5580,
		SpvOpSubgroupImageMediaBlockWriteINTEL = 5581,
		SpvOpUCountLeadingZerosINTEL = 5585,
		SpvOpUCountTrailingZerosINTEL = 5586,
		SpvOpAbsISubINTEL = 5587,
		SpvOpAbsUSubINTEL = 5588,
		SpvOpIAddSatINTEL = 5589,
		SpvOpUAddSatINTEL = 5590,
		SpvOpIAverageINTEL = 5591,
		SpvOpUAverageINTEL = 5592,
		SpvOpIAverageRoundedINTEL = 5593,
		SpvOpUAverageRoundedINTEL = 5594,
		SpvOpISubSatINTEL = 5595,
		SpvOpUSubSatINTEL = 5596,
		SpvOpIMul32x16INTEL = 5597,
		SpvOpUMul32x16INTEL = 5598,
		SpvOpConstantFunctionPointerINTEL = 5600,
		SpvOpFunctionPointerCallINTEL = 5601,
		SpvOpAsmTargetINTEL = 5609,
		SpvOpAsmINTEL = 5610,
		SpvOpAsmCallINTEL = 5611,
		SpvOpAtomicFMinEXT = 5614,
		SpvOpAtomicFMaxEXT = 5615,
		SpvOpAssumeTrueKHR = 5630,
		SpvOpExpectKHR = 5631,
		SpvOpDecorateString = 5632,
		// SpvOpDecorateStringGOOGLE = 5632,
		SpvOpMemberDecorateString = 5633,
		// SpvOpMemberDecorateStringGOOGLE = 5633,
		SpvOpVmeImageINTEL = 5699,
		SpvOpTypeVmeImageINTEL = 5700,
		SpvOpTypeAvcImePayloadINTEL = 5701,
		SpvOpTypeAvcRefPayloadINTEL = 5702,
		SpvOpTypeAvcSicPayloadINTEL = 5703,
		SpvOpTypeAvcMcePayloadINTEL = 5704,
		SpvOpTypeAvcMceResultINTEL = 5705,
		SpvOpTypeAvcImeResultINTEL = 5706,
		SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL = 5707,
		SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL = 5708,
		SpvOpTypeAvcImeSingleReferenceStreaminINTEL = 5709,
		SpvOpTypeAvcImeDualReferenceStreaminINTEL = 5710,
		SpvOpTypeAvcRefResultINTEL = 5711,
		SpvOpTypeAvcSicResultINTEL = 5712,
		SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = 5713,
		SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = 5714,
		SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL = 5715,
		SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL = 5716,
		SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = 5717,
		SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL = 5718,
		SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = 5719,
		SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = 5720,
		SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = 5721,
		SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = 5722,
		SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = 5723,
		SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL = 5724,
		SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = 5725,
		SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = 5726,
		SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = 5727,
		SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL = 5728,
		SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = 5729,
		SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = 5730,
		SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = 5731,
		SpvOpSubgroupAvcMceConvertToImePayloadINTEL = 5732,
		SpvOpSubgroupAvcMceConvertToImeResultINTEL = 5733,
		SpvOpSubgroupAvcMceConvertToRefPayloadINTEL = 5734,
		SpvOpSubgroupAvcMceConvertToRefResultINTEL = 5735,
		SpvOpSubgroupAvcMceConvertToSicPayloadINTEL = 5736,
		SpvOpSubgroupAvcMceConvertToSicResultINTEL = 5737,
		SpvOpSubgroupAvcMceGetMotionVectorsINTEL = 5738,
		SpvOpSubgroupAvcMceGetInterDistortionsINTEL = 5739,
		SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL = 5740,
		SpvOpSubgroupAvcMceGetInterMajorShapeINTEL = 5741,
		SpvOpSubgroupAvcMceGetInterMinorShapeINTEL = 5742,
		SpvOpSubgroupAvcMceGetInterDirectionsINTEL = 5743,
		SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL = 5744,
		SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL = 5745,
		SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = 5746,
		SpvOpSubgroupAvcImeInitializeINTEL = 5747,
		SpvOpSubgroupAvcImeSetSingleReferenceINTEL = 5748,
		SpvOpSubgroupAvcImeSetDualReferenceINTEL = 5749,
		SpvOpSubgroupAvcImeRefWindowSizeINTEL = 5750,
		SpvOpSubgroupAvcImeAdjustRefOffsetINTEL = 5751,
		SpvOpSubgroupAvcImeConvertToMcePayloadINTEL = 5752,
		SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL = 5753,
		SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL = 5754,
		SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = 5755,
		SpvOpSubgroupAvcImeSetWeightedSadINTEL = 5756,
		SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL = 5757,
		SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL = 5758,
		SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = 5759,
		SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = 5760,
		SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = 5761,
		SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = 5762,
		SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = 5763,
		SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = 5764,
		SpvOpSubgroupAvcImeConvertToMceResultINTEL = 5765,
		SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL = 5766,
		SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL = 5767,
		SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL = 5768,
		SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL = 5769,
		SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = 5770,
		SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = 5771,
		SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = 5772,
		SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = 5773,
		SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = 5774,
		SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = 5775,
		SpvOpSubgroupAvcImeGetBorderReachedINTEL = 5776,
		SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL = 5777,
		SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = 5778,
		SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = 5779,
		SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = 5780,
		SpvOpSubgroupAvcFmeInitializeINTEL = 5781,
		SpvOpSubgroupAvcBmeInitializeINTEL = 5782,
		SpvOpSubgroupAvcRefConvertToMcePayloadINTEL = 5783,
		SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL = 5784,
		SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL = 5785,
		SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL = 5786,
		SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL = 5787,
		SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL = 5788,
		SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = 5789,
		SpvOpSubgroupAvcRefConvertToMceResultINTEL = 5790,
		SpvOpSubgroupAvcSicInitializeINTEL = 5791,
		SpvOpSubgroupAvcSicConfigureSkcINTEL = 5792,
		SpvOpSubgroupAvcSicConfigureIpeLumaINTEL = 5793,
		SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL = 5794,
		SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL = 5795,
		SpvOpSubgroupAvcSicConvertToMcePayloadINTEL = 5796,
		SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL = 5797,
		SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = 5798,
		SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = 5799,
		SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL = 5800,
		SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL = 5801,
		SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL = 5802,
		SpvOpSubgroupAvcSicEvaluateIpeINTEL = 5803,
		SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL = 5804,
		SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL = 5805,
		SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL = 5806,
		SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = 5807,
		SpvOpSubgroupAvcSicConvertToMceResultINTEL = 5808,
		SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL = 5809,
		SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL = 5810,
		SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL = 5811,
		SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL = 5812,
		SpvOpSubgroupAvcSicGetIpeChromaModeINTEL = 5813,
		SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = 5814,
		SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = 5815,
		SpvOpSubgroupAvcSicGetInterRawSadsINTEL = 5816,
		SpvOpVariableLengthArrayINTEL = 5818,
		SpvOpSaveMemoryINTEL = 5819,
		SpvOpRestoreMemoryINTEL = 5820,
		SpvOpArbitraryFloatSinCosPiINTEL = 5840,
		SpvOpArbitraryFloatCastINTEL = 5841,
		SpvOpArbitraryFloatCastFromIntINTEL = 5842,
		SpvOpArbitraryFloatCastToIntINTEL = 5843,
		SpvOpArbitraryFloatAddINTEL = 5846,
		SpvOpArbitraryFloatSubINTEL = 5847,
		SpvOpArbitraryFloatMulINTEL = 5848,
		SpvOpArbitraryFloatDivINTEL = 5849,
		SpvOpArbitraryFloatGTINTEL = 5850,
		SpvOpArbitraryFloatGEINTEL = 5851,
		SpvOpArbitraryFloatLTINTEL = 5852,
		SpvOpArbitraryFloatLEINTEL = 5853,
		SpvOpArbitraryFloatEQINTEL = 5854,
		SpvOpArbitraryFloatRecipINTEL = 5855,
		SpvOpArbitraryFloatRSqrtINTEL = 5856,
		SpvOpArbitraryFloatCbrtINTEL = 5857,
		SpvOpArbitraryFloatHypotINTEL = 5858,
		SpvOpArbitraryFloatSqrtINTEL = 5859,
		SpvOpArbitraryFloatLogINTEL = 5860,
		SpvOpArbitraryFloatLog2INTEL = 5861,
		SpvOpArbitraryFloatLog10INTEL = 5862,
		SpvOpArbitraryFloatLog1pINTEL = 5863,
		SpvOpArbitraryFloatExpINTEL = 5864,
		SpvOpArbitraryFloatExp2INTEL = 5865,
		SpvOpArbitraryFloatExp10INTEL = 5866,
		SpvOpArbitraryFloatExpm1INTEL = 5867,
		SpvOpArbitraryFloatSinINTEL = 5868,
		SpvOpArbitraryFloatCosINTEL = 5869,
		SpvOpArbitraryFloatSinCosINTEL = 5870,
		SpvOpArbitraryFloatSinPiINTEL = 5871,
		SpvOpArbitraryFloatCosPiINTEL = 5872,
		SpvOpArbitraryFloatASinINTEL = 5873,
		SpvOpArbitraryFloatASinPiINTEL = 5874,
		SpvOpArbitraryFloatACosINTEL = 5875,
		SpvOpArbitraryFloatACosPiINTEL = 5876,
		SpvOpArbitraryFloatATanINTEL = 5877,
		SpvOpArbitraryFloatATanPiINTEL = 5878,
		SpvOpArbitraryFloatATan2INTEL = 5879,
		SpvOpArbitraryFloatPowINTEL = 5880,
		SpvOpArbitraryFloatPowRINTEL = 5881,
		SpvOpArbitraryFloatPowNINTEL = 5882,
		SpvOpLoopControlINTEL = 5887,
		SpvOpFixedSqrtINTEL = 5923,
		SpvOpFixedRecipINTEL = 5924,
		SpvOpFixedRsqrtINTEL = 5925,
		SpvOpFixedSinINTEL = 5926,
		SpvOpFixedCosINTEL = 5927,
		SpvOpFixedSinCosINTEL = 5928,
		SpvOpFixedSinPiINTEL = 5929,
		SpvOpFixedCosPiINTEL = 5930,
		SpvOpFixedSinCosPiINTEL = 5931,
		SpvOpFixedLogINTEL = 5932,
		SpvOpFixedExpINTEL = 5933,
		SpvOpPtrCastToCrossWorkgroupINTEL = 5934,
		SpvOpCrossWorkgroupCastToPtrINTEL = 5938,
		SpvOpReadPipeBlockingINTEL = 5946,
		SpvOpWritePipeBlockingINTEL = 5947,
		SpvOpFPGARegINTEL = 5949,
		SpvOpRayQueryGetRayTMinKHR = 6016,
		SpvOpRayQueryGetRayFlagsKHR = 6017,
		SpvOpRayQueryGetIntersectionTKHR = 6018,
		SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR = 6019,
		SpvOpRayQueryGetIntersectionInstanceIdKHR = 6020,
		SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR = 6021,
		SpvOpRayQueryGetIntersectionGeometryIndexKHR = 6022,
		SpvOpRayQueryGetIntersectionPrimitiveIndexKHR = 6023,
		SpvOpRayQueryGetIntersectionBarycentricsKHR = 6024,
		SpvOpRayQueryGetIntersectionFrontFaceKHR = 6025,
		SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR = 6026,
		SpvOpRayQueryGetIntersectionObjectRayDirectionKHR = 6027,
		SpvOpRayQueryGetIntersectionObjectRayOriginKHR = 6028,
		SpvOpRayQueryGetWorldRayDirectionKHR = 6029,
		SpvOpRayQueryGetWorldRayOriginKHR = 6030,
		SpvOpRayQueryGetIntersectionObjectToWorldKHR = 6031,
		SpvOpRayQueryGetIntersectionWorldToObjectKHR = 6032,
		SpvOpAtomicFAddEXT = 6035,
		SpvOpTypeBufferSurfaceINTEL = 6086,
		SpvOpTypeStructContinuedINTEL = 6090,
		SpvOpConstantCompositeContinuedINTEL = 6091,
		SpvOpSpecConstantCompositeContinuedINTEL = 6092,
		SpvOpMax = 2147483647
	}

	// Pseudo enum 'SpvSourceLanguage_' @ spirv.h:65:14 (include\spirv\unified1\spirv.h)
	public const int SpvSourceLanguageUnknown = 0;
	public const int SpvSourceLanguageESSL = 1;
	public const int SpvSourceLanguageGLSL = 2;
	public const int SpvSourceLanguageOpenCL_C = 3;
	public const int SpvSourceLanguageOpenCL_CPP = 4;
	public const int SpvSourceLanguageHLSL = 5;
	public const int SpvSourceLanguageCPP_for_OpenCL = 6;
	public const int SpvSourceLanguageMax = 2147483647;

	// Pseudo enum 'SpvExecutionModel_' @ spirv.h:76:14 (include\spirv\unified1\spirv.h)
	public const int SpvExecutionModelVertex = 0;
	public const int SpvExecutionModelTessellationControl = 1;
	public const int SpvExecutionModelTessellationEvaluation = 2;
	public const int SpvExecutionModelGeometry = 3;
	public const int SpvExecutionModelFragment = 4;
	public const int SpvExecutionModelGLCompute = 5;
	public const int SpvExecutionModelKernel = 6;
	public const int SpvExecutionModelTaskNV = 5267;
	public const int SpvExecutionModelMeshNV = 5268;
	public const int SpvExecutionModelRayGenerationKHR = 5313;
	public const int SpvExecutionModelRayGenerationNV = 5313;
	public const int SpvExecutionModelIntersectionKHR = 5314;
	public const int SpvExecutionModelIntersectionNV = 5314;
	public const int SpvExecutionModelAnyHitKHR = 5315;
	public const int SpvExecutionModelAnyHitNV = 5315;
	public const int SpvExecutionModelClosestHitKHR = 5316;
	public const int SpvExecutionModelClosestHitNV = 5316;
	public const int SpvExecutionModelMissKHR = 5317;
	public const int SpvExecutionModelMissNV = 5317;
	public const int SpvExecutionModelCallableKHR = 5318;
	public const int SpvExecutionModelCallableNV = 5318;
	public const int SpvExecutionModelMax = 2147483647;

	// Pseudo enum 'SpvAddressingModel_' @ spirv.h:101:14 (include\spirv\unified1\spirv.h)
	public const int SpvAddressingModelLogical = 0;
	public const int SpvAddressingModelPhysical32 = 1;
	public const int SpvAddressingModelPhysical64 = 2;
	public const int SpvAddressingModelPhysicalStorageBuffer64 = 5348;
	public const int SpvAddressingModelPhysicalStorageBuffer64EXT = 5348;
	public const int SpvAddressingModelMax = 2147483647;

	// Pseudo enum 'SpvMemoryModel_' @ spirv.h:110:14 (include\spirv\unified1\spirv.h)
	public const int SpvMemoryModelSimple = 0;
	public const int SpvMemoryModelGLSL450 = 1;
	public const int SpvMemoryModelOpenCL = 2;
	public const int SpvMemoryModelVulkan = 3;
	public const int SpvMemoryModelVulkanKHR = 3;
	public const int SpvMemoryModelMax = 2147483647;

	// Pseudo enum 'SpvExecutionMode_' @ spirv.h:119:14 (include\spirv\unified1\spirv.h)
	public const int SpvExecutionModeInvocations = 0;
	public const int SpvExecutionModeSpacingEqual = 1;
	public const int SpvExecutionModeSpacingFractionalEven = 2;
	public const int SpvExecutionModeSpacingFractionalOdd = 3;
	public const int SpvExecutionModeVertexOrderCw = 4;
	public const int SpvExecutionModeVertexOrderCcw = 5;
	public const int SpvExecutionModePixelCenterInteger = 6;
	public const int SpvExecutionModeOriginUpperLeft = 7;
	public const int SpvExecutionModeOriginLowerLeft = 8;
	public const int SpvExecutionModeEarlyFragmentTests = 9;
	public const int SpvExecutionModePointMode = 10;
	public const int SpvExecutionModeXfb = 11;
	public const int SpvExecutionModeDepthReplacing = 12;
	public const int SpvExecutionModeDepthGreater = 14;
	public const int SpvExecutionModeDepthLess = 15;
	public const int SpvExecutionModeDepthUnchanged = 16;
	public const int SpvExecutionModeLocalSize = 17;
	public const int SpvExecutionModeLocalSizeHint = 18;
	public const int SpvExecutionModeInputPoints = 19;
	public const int SpvExecutionModeInputLines = 20;
	public const int SpvExecutionModeInputLinesAdjacency = 21;
	public const int SpvExecutionModeTriangles = 22;
	public const int SpvExecutionModeInputTrianglesAdjacency = 23;
	public const int SpvExecutionModeQuads = 24;
	public const int SpvExecutionModeIsolines = 25;
	public const int SpvExecutionModeOutputVertices = 26;
	public const int SpvExecutionModeOutputPoints = 27;
	public const int SpvExecutionModeOutputLineStrip = 28;
	public const int SpvExecutionModeOutputTriangleStrip = 29;
	public const int SpvExecutionModeVecTypeHint = 30;
	public const int SpvExecutionModeContractionOff = 31;
	public const int SpvExecutionModeInitializer = 33;
	public const int SpvExecutionModeFinalizer = 34;
	public const int SpvExecutionModeSubgroupSize = 35;
	public const int SpvExecutionModeSubgroupsPerWorkgroup = 36;
	public const int SpvExecutionModeSubgroupsPerWorkgroupId = 37;
	public const int SpvExecutionModeLocalSizeId = 38;
	public const int SpvExecutionModeLocalSizeHintId = 39;
	public const int SpvExecutionModeSubgroupUniformControlFlowKHR = 4421;
	public const int SpvExecutionModePostDepthCoverage = 4446;
	public const int SpvExecutionModeDenormPreserve = 4459;
	public const int SpvExecutionModeDenormFlushToZero = 4460;
	public const int SpvExecutionModeSignedZeroInfNanPreserve = 4461;
	public const int SpvExecutionModeRoundingModeRTE = 4462;
	public const int SpvExecutionModeRoundingModeRTZ = 4463;
	public const int SpvExecutionModeStencilRefReplacingEXT = 5027;
	public const int SpvExecutionModeOutputLinesNV = 5269;
	public const int SpvExecutionModeOutputPrimitivesNV = 5270;
	public const int SpvExecutionModeDerivativeGroupQuadsNV = 5289;
	public const int SpvExecutionModeDerivativeGroupLinearNV = 5290;
	public const int SpvExecutionModeOutputTrianglesNV = 5298;
	public const int SpvExecutionModePixelInterlockOrderedEXT = 5366;
	public const int SpvExecutionModePixelInterlockUnorderedEXT = 5367;
	public const int SpvExecutionModeSampleInterlockOrderedEXT = 5368;
	public const int SpvExecutionModeSampleInterlockUnorderedEXT = 5369;
	public const int SpvExecutionModeShadingRateInterlockOrderedEXT = 5370;
	public const int SpvExecutionModeShadingRateInterlockUnorderedEXT = 5371;
	public const int SpvExecutionModeSharedLocalMemorySizeINTEL = 5618;
	public const int SpvExecutionModeRoundingModeRTPINTEL = 5620;
	public const int SpvExecutionModeRoundingModeRTNINTEL = 5621;
	public const int SpvExecutionModeFloatingPointModeALTINTEL = 5622;
	public const int SpvExecutionModeFloatingPointModeIEEEINTEL = 5623;
	public const int SpvExecutionModeMaxWorkgroupSizeINTEL = 5893;
	public const int SpvExecutionModeMaxWorkDimINTEL = 5894;
	public const int SpvExecutionModeNoGlobalOffsetINTEL = 5895;
	public const int SpvExecutionModeNumSIMDWorkitemsINTEL = 5896;
	public const int SpvExecutionModeSchedulerTargetFmaxMhzINTEL = 5903;
	public const int SpvExecutionModeMax = 2147483647;

	// Pseudo enum 'SpvStorageClass_' @ spirv.h:190:14 (include\spirv\unified1\spirv.h)
	public const int SpvStorageClassUniformConstant = 0;
	public const int SpvStorageClassInput = 1;
	public const int SpvStorageClassUniform = 2;
	public const int SpvStorageClassOutput = 3;
	public const int SpvStorageClassWorkgroup = 4;
	public const int SpvStorageClassCrossWorkgroup = 5;
	public const int SpvStorageClassPrivate = 6;
	public const int SpvStorageClassFunction = 7;
	public const int SpvStorageClassGeneric = 8;
	public const int SpvStorageClassPushConstant = 9;
	public const int SpvStorageClassAtomicCounter = 10;
	public const int SpvStorageClassImage = 11;
	public const int SpvStorageClassStorageBuffer = 12;
	public const int SpvStorageClassCallableDataKHR = 5328;
	public const int SpvStorageClassCallableDataNV = 5328;
	public const int SpvStorageClassIncomingCallableDataKHR = 5329;
	public const int SpvStorageClassIncomingCallableDataNV = 5329;
	public const int SpvStorageClassRayPayloadKHR = 5338;
	public const int SpvStorageClassRayPayloadNV = 5338;
	public const int SpvStorageClassHitAttributeKHR = 5339;
	public const int SpvStorageClassHitAttributeNV = 5339;
	public const int SpvStorageClassIncomingRayPayloadKHR = 5342;
	public const int SpvStorageClassIncomingRayPayloadNV = 5342;
	public const int SpvStorageClassShaderRecordBufferKHR = 5343;
	public const int SpvStorageClassShaderRecordBufferNV = 5343;
	public const int SpvStorageClassPhysicalStorageBuffer = 5349;
	public const int SpvStorageClassPhysicalStorageBufferEXT = 5349;
	public const int SpvStorageClassCodeSectionINTEL = 5605;
	public const int SpvStorageClassDeviceOnlyINTEL = 5936;
	public const int SpvStorageClassHostOnlyINTEL = 5937;
	public const int SpvStorageClassMax = 2147483647;

	// Pseudo enum 'SpvDim_' @ spirv.h:224:14 (include\spirv\unified1\spirv.h)
	public const int SpvDim1D = 0;
	public const int SpvDim2D = 1;
	public const int SpvDim3D = 2;
	public const int SpvDimCube = 3;
	public const int SpvDimRect = 4;
	public const int SpvDimBuffer = 5;
	public const int SpvDimSubpassData = 6;
	public const int SpvDimMax = 2147483647;

	// Pseudo enum 'SpvSamplerAddressingMode_' @ spirv.h:235:14 (include\spirv\unified1\spirv.h)
	public const int SpvSamplerAddressingModeNone = 0;
	public const int SpvSamplerAddressingModeClampToEdge = 1;
	public const int SpvSamplerAddressingModeClamp = 2;
	public const int SpvSamplerAddressingModeRepeat = 3;
	public const int SpvSamplerAddressingModeRepeatMirrored = 4;
	public const int SpvSamplerAddressingModeMax = 2147483647;

	// Pseudo enum 'SpvSamplerFilterMode_' @ spirv.h:244:14 (include\spirv\unified1\spirv.h)
	public const int SpvSamplerFilterModeNearest = 0;
	public const int SpvSamplerFilterModeLinear = 1;
	public const int SpvSamplerFilterModeMax = 2147483647;

	// Pseudo enum 'SpvImageFormat_' @ spirv.h:250:14 (include\spirv\unified1\spirv.h)
	public const int SpvImageFormatUnknown = 0;
	public const int SpvImageFormatRgba32f = 1;
	public const int SpvImageFormatRgba16f = 2;
	public const int SpvImageFormatR32f = 3;
	public const int SpvImageFormatRgba8 = 4;
	public const int SpvImageFormatRgba8Snorm = 5;
	public const int SpvImageFormatRg32f = 6;
	public const int SpvImageFormatRg16f = 7;
	public const int SpvImageFormatR11fG11fB10f = 8;
	public const int SpvImageFormatR16f = 9;
	public const int SpvImageFormatRgba16 = 10;
	public const int SpvImageFormatRgb10A2 = 11;
	public const int SpvImageFormatRg16 = 12;
	public const int SpvImageFormatRg8 = 13;
	public const int SpvImageFormatR16 = 14;
	public const int SpvImageFormatR8 = 15;
	public const int SpvImageFormatRgba16Snorm = 16;
	public const int SpvImageFormatRg16Snorm = 17;
	public const int SpvImageFormatRg8Snorm = 18;
	public const int SpvImageFormatR16Snorm = 19;
	public const int SpvImageFormatR8Snorm = 20;
	public const int SpvImageFormatRgba32i = 21;
	public const int SpvImageFormatRgba16i = 22;
	public const int SpvImageFormatRgba8i = 23;
	public const int SpvImageFormatR32i = 24;
	public const int SpvImageFormatRg32i = 25;
	public const int SpvImageFormatRg16i = 26;
	public const int SpvImageFormatRg8i = 27;
	public const int SpvImageFormatR16i = 28;
	public const int SpvImageFormatR8i = 29;
	public const int SpvImageFormatRgba32ui = 30;
	public const int SpvImageFormatRgba16ui = 31;
	public const int SpvImageFormatRgba8ui = 32;
	public const int SpvImageFormatR32ui = 33;
	public const int SpvImageFormatRgb10a2ui = 34;
	public const int SpvImageFormatRg32ui = 35;
	public const int SpvImageFormatRg16ui = 36;
	public const int SpvImageFormatRg8ui = 37;
	public const int SpvImageFormatR16ui = 38;
	public const int SpvImageFormatR8ui = 39;
	public const int SpvImageFormatR64ui = 40;
	public const int SpvImageFormatR64i = 41;
	public const int SpvImageFormatMax = 2147483647;

	// Pseudo enum 'SpvImageChannelOrder_' @ spirv.h:296:14 (include\spirv\unified1\spirv.h)
	public const int SpvImageChannelOrderR = 0;
	public const int SpvImageChannelOrderA = 1;
	public const int SpvImageChannelOrderRG = 2;
	public const int SpvImageChannelOrderRA = 3;
	public const int SpvImageChannelOrderRGB = 4;
	public const int SpvImageChannelOrderRGBA = 5;
	public const int SpvImageChannelOrderBGRA = 6;
	public const int SpvImageChannelOrderARGB = 7;
	public const int SpvImageChannelOrderIntensity = 8;
	public const int SpvImageChannelOrderLuminance = 9;
	public const int SpvImageChannelOrderRx = 10;
	public const int SpvImageChannelOrderRGx = 11;
	public const int SpvImageChannelOrderRGBx = 12;
	public const int SpvImageChannelOrderDepth = 13;
	public const int SpvImageChannelOrderDepthStencil = 14;
	public const int SpvImageChannelOrdersRGB = 15;
	public const int SpvImageChannelOrdersRGBx = 16;
	public const int SpvImageChannelOrdersRGBA = 17;
	public const int SpvImageChannelOrdersBGRA = 18;
	public const int SpvImageChannelOrderABGR = 19;
	public const int SpvImageChannelOrderMax = 2147483647;

	// Pseudo enum 'SpvImageChannelDataType_' @ spirv.h:320:14 (include\spirv\unified1\spirv.h)
	public const int SpvImageChannelDataTypeSnormInt8 = 0;
	public const int SpvImageChannelDataTypeSnormInt16 = 1;
	public const int SpvImageChannelDataTypeUnormInt8 = 2;
	public const int SpvImageChannelDataTypeUnormInt16 = 3;
	public const int SpvImageChannelDataTypeUnormShort565 = 4;
	public const int SpvImageChannelDataTypeUnormShort555 = 5;
	public const int SpvImageChannelDataTypeUnormInt101010 = 6;
	public const int SpvImageChannelDataTypeSignedInt8 = 7;
	public const int SpvImageChannelDataTypeSignedInt16 = 8;
	public const int SpvImageChannelDataTypeSignedInt32 = 9;
	public const int SpvImageChannelDataTypeUnsignedInt8 = 10;
	public const int SpvImageChannelDataTypeUnsignedInt16 = 11;
	public const int SpvImageChannelDataTypeUnsignedInt32 = 12;
	public const int SpvImageChannelDataTypeHalfFloat = 13;
	public const int SpvImageChannelDataTypeFloat = 14;
	public const int SpvImageChannelDataTypeUnormInt24 = 15;
	public const int SpvImageChannelDataTypeUnormInt101010_2 = 16;
	public const int SpvImageChannelDataTypeMax = 2147483647;

	// Pseudo enum 'SpvImageOperandsShift_' @ spirv.h:341:14 (include\spirv\unified1\spirv.h)
	public const int SpvImageOperandsBiasShift = 0;
	public const int SpvImageOperandsLodShift = 1;
	public const int SpvImageOperandsGradShift = 2;
	public const int SpvImageOperandsConstOffsetShift = 3;
	public const int SpvImageOperandsOffsetShift = 4;
	public const int SpvImageOperandsConstOffsetsShift = 5;
	public const int SpvImageOperandsSampleShift = 6;
	public const int SpvImageOperandsMinLodShift = 7;
	public const int SpvImageOperandsMakeTexelAvailableShift = 8;
	public const int SpvImageOperandsMakeTexelAvailableKHRShift = 8;
	public const int SpvImageOperandsMakeTexelVisibleShift = 9;
	public const int SpvImageOperandsMakeTexelVisibleKHRShift = 9;
	public const int SpvImageOperandsNonPrivateTexelShift = 10;
	public const int SpvImageOperandsNonPrivateTexelKHRShift = 10;
	public const int SpvImageOperandsVolatileTexelShift = 11;
	public const int SpvImageOperandsVolatileTexelKHRShift = 11;
	public const int SpvImageOperandsSignExtendShift = 12;
	public const int SpvImageOperandsZeroExtendShift = 13;
	public const int SpvImageOperandsNontemporalShift = 14;
	public const int SpvImageOperandsOffsetsShift = 16;
	public const int SpvImageOperandsMax = 2147483647;

	// Pseudo enum 'SpvImageOperandsMask_' @ spirv.h:365:14 (include\spirv\unified1\spirv.h)
	public const int SpvImageOperandsMaskNone = 0;
	public const int SpvImageOperandsBiasMask = 1;
	public const int SpvImageOperandsLodMask = 2;
	public const int SpvImageOperandsGradMask = 4;
	public const int SpvImageOperandsConstOffsetMask = 8;
	public const int SpvImageOperandsOffsetMask = 16;
	public const int SpvImageOperandsConstOffsetsMask = 32;
	public const int SpvImageOperandsSampleMask = 64;
	public const int SpvImageOperandsMinLodMask = 128;
	public const int SpvImageOperandsMakeTexelAvailableMask = 256;
	public const int SpvImageOperandsMakeTexelAvailableKHRMask = 256;
	public const int SpvImageOperandsMakeTexelVisibleMask = 512;
	public const int SpvImageOperandsMakeTexelVisibleKHRMask = 512;
	public const int SpvImageOperandsNonPrivateTexelMask = 1024;
	public const int SpvImageOperandsNonPrivateTexelKHRMask = 1024;
	public const int SpvImageOperandsVolatileTexelMask = 2048;
	public const int SpvImageOperandsVolatileTexelKHRMask = 2048;
	public const int SpvImageOperandsSignExtendMask = 4096;
	public const int SpvImageOperandsZeroExtendMask = 8192;
	public const int SpvImageOperandsNontemporalMask = 16384;
	public const int SpvImageOperandsOffsetsMask = 65536;

	// Pseudo enum 'SpvFPFastMathModeShift_' @ spirv.h:389:14 (include\spirv\unified1\spirv.h)
	public const int SpvFPFastMathModeNotNaNShift = 0;
	public const int SpvFPFastMathModeNotInfShift = 1;
	public const int SpvFPFastMathModeNSZShift = 2;
	public const int SpvFPFastMathModeAllowRecipShift = 3;
	public const int SpvFPFastMathModeFastShift = 4;
	public const int SpvFPFastMathModeAllowContractFastINTELShift = 16;
	public const int SpvFPFastMathModeAllowReassocINTELShift = 17;
	public const int SpvFPFastMathModeMax = 2147483647;

	// Pseudo enum 'SpvFPFastMathModeMask_' @ spirv.h:400:14 (include\spirv\unified1\spirv.h)
	public const int SpvFPFastMathModeMaskNone = 0;
	public const int SpvFPFastMathModeNotNaNMask = 1;
	public const int SpvFPFastMathModeNotInfMask = 2;
	public const int SpvFPFastMathModeNSZMask = 4;
	public const int SpvFPFastMathModeAllowRecipMask = 8;
	public const int SpvFPFastMathModeFastMask = 16;
	public const int SpvFPFastMathModeAllowContractFastINTELMask = 65536;
	public const int SpvFPFastMathModeAllowReassocINTELMask = 131072;

	// Pseudo enum 'SpvFPRoundingMode_' @ spirv.h:411:14 (include\spirv\unified1\spirv.h)
	public const int SpvFPRoundingModeRTE = 0;
	public const int SpvFPRoundingModeRTZ = 1;
	public const int SpvFPRoundingModeRTP = 2;
	public const int SpvFPRoundingModeRTN = 3;
	public const int SpvFPRoundingModeMax = 2147483647;

	// Pseudo enum 'SpvLinkageType_' @ spirv.h:419:14 (include\spirv\unified1\spirv.h)
	public const int SpvLinkageTypeExport = 0;
	public const int SpvLinkageTypeImport = 1;
	public const int SpvLinkageTypeLinkOnceODR = 2;
	public const int SpvLinkageTypeMax = 2147483647;

	// Pseudo enum 'SpvAccessQualifier_' @ spirv.h:426:14 (include\spirv\unified1\spirv.h)
	public const int SpvAccessQualifierReadOnly = 0;
	public const int SpvAccessQualifierWriteOnly = 1;
	public const int SpvAccessQualifierReadWrite = 2;
	public const int SpvAccessQualifierMax = 2147483647;

	// Pseudo enum 'SpvFunctionParameterAttribute_' @ spirv.h:433:14 (include\spirv\unified1\spirv.h)
	public const int SpvFunctionParameterAttributeZext = 0;
	public const int SpvFunctionParameterAttributeSext = 1;
	public const int SpvFunctionParameterAttributeByVal = 2;
	public const int SpvFunctionParameterAttributeSret = 3;
	public const int SpvFunctionParameterAttributeNoAlias = 4;
	public const int SpvFunctionParameterAttributeNoCapture = 5;
	public const int SpvFunctionParameterAttributeNoWrite = 6;
	public const int SpvFunctionParameterAttributeNoReadWrite = 7;
	public const int SpvFunctionParameterAttributeMax = 2147483647;

	// Pseudo enum 'SpvDecoration_' @ spirv.h:445:14 (include\spirv\unified1\spirv.h)
	public const int SpvDecorationRelaxedPrecision = 0;
	public const int SpvDecorationSpecId = 1;
	public const int SpvDecorationBlock = 2;
	public const int SpvDecorationBufferBlock = 3;
	public const int SpvDecorationRowMajor = 4;
	public const int SpvDecorationColMajor = 5;
	public const int SpvDecorationArrayStride = 6;
	public const int SpvDecorationMatrixStride = 7;
	public const int SpvDecorationGLSLShared = 8;
	public const int SpvDecorationGLSLPacked = 9;
	public const int SpvDecorationCPacked = 10;
	public const int SpvDecorationBuiltIn = 11;
	public const int SpvDecorationNoPerspective = 13;
	public const int SpvDecorationFlat = 14;
	public const int SpvDecorationPatch = 15;
	public const int SpvDecorationCentroid = 16;
	public const int SpvDecorationSample = 17;
	public const int SpvDecorationInvariant = 18;
	public const int SpvDecorationRestrict = 19;
	public const int SpvDecorationAliased = 20;
	public const int SpvDecorationVolatile = 21;
	public const int SpvDecorationConstant = 22;
	public const int SpvDecorationCoherent = 23;
	public const int SpvDecorationNonWritable = 24;
	public const int SpvDecorationNonReadable = 25;
	public const int SpvDecorationUniform = 26;
	public const int SpvDecorationUniformId = 27;
	public const int SpvDecorationSaturatedConversion = 28;
	public const int SpvDecorationStream = 29;
	public const int SpvDecorationLocation = 30;
	public const int SpvDecorationComponent = 31;
	public const int SpvDecorationIndex = 32;
	public const int SpvDecorationBinding = 33;
	public const int SpvDecorationDescriptorSet = 34;
	public const int SpvDecorationOffset = 35;
	public const int SpvDecorationXfbBuffer = 36;
	public const int SpvDecorationXfbStride = 37;
	public const int SpvDecorationFuncParamAttr = 38;
	public const int SpvDecorationFPRoundingMode = 39;
	public const int SpvDecorationFPFastMathMode = 40;
	public const int SpvDecorationLinkageAttributes = 41;
	public const int SpvDecorationNoContraction = 42;
	public const int SpvDecorationInputAttachmentIndex = 43;
	public const int SpvDecorationAlignment = 44;
	public const int SpvDecorationMaxByteOffset = 45;
	public const int SpvDecorationAlignmentId = 46;
	public const int SpvDecorationMaxByteOffsetId = 47;
	public const int SpvDecorationNoSignedWrap = 4469;
	public const int SpvDecorationNoUnsignedWrap = 4470;
	public const int SpvDecorationExplicitInterpAMD = 4999;
	public const int SpvDecorationOverrideCoverageNV = 5248;
	public const int SpvDecorationPassthroughNV = 5250;
	public const int SpvDecorationViewportRelativeNV = 5252;
	public const int SpvDecorationSecondaryViewportRelativeNV = 5256;
	public const int SpvDecorationPerPrimitiveNV = 5271;
	public const int SpvDecorationPerViewNV = 5272;
	public const int SpvDecorationPerTaskNV = 5273;
	public const int SpvDecorationPerVertexKHR = 5285;
	public const int SpvDecorationPerVertexNV = 5285;
	public const int SpvDecorationNonUniform = 5300;
	public const int SpvDecorationNonUniformEXT = 5300;
	public const int SpvDecorationRestrictPointer = 5355;
	public const int SpvDecorationRestrictPointerEXT = 5355;
	public const int SpvDecorationAliasedPointer = 5356;
	public const int SpvDecorationAliasedPointerEXT = 5356;
	public const int SpvDecorationBindlessSamplerNV = 5398;
	public const int SpvDecorationBindlessImageNV = 5399;
	public const int SpvDecorationBoundSamplerNV = 5400;
	public const int SpvDecorationBoundImageNV = 5401;
	public const int SpvDecorationSIMTCallINTEL = 5599;
	public const int SpvDecorationReferencedIndirectlyINTEL = 5602;
	public const int SpvDecorationClobberINTEL = 5607;
	public const int SpvDecorationSideEffectsINTEL = 5608;
	public const int SpvDecorationVectorComputeVariableINTEL = 5624;
	public const int SpvDecorationFuncParamIOKindINTEL = 5625;
	public const int SpvDecorationVectorComputeFunctionINTEL = 5626;
	public const int SpvDecorationStackCallINTEL = 5627;
	public const int SpvDecorationGlobalVariableOffsetINTEL = 5628;
	public const int SpvDecorationCounterBuffer = 5634;
	public const int SpvDecorationHlslCounterBufferGOOGLE = 5634;
	public const int SpvDecorationHlslSemanticGOOGLE = 5635;
	public const int SpvDecorationUserSemantic = 5635;
	public const int SpvDecorationUserTypeGOOGLE = 5636;
	public const int SpvDecorationFunctionRoundingModeINTEL = 5822;
	public const int SpvDecorationFunctionDenormModeINTEL = 5823;
	public const int SpvDecorationRegisterINTEL = 5825;
	public const int SpvDecorationMemoryINTEL = 5826;
	public const int SpvDecorationNumbanksINTEL = 5827;
	public const int SpvDecorationBankwidthINTEL = 5828;
	public const int SpvDecorationMaxPrivateCopiesINTEL = 5829;
	public const int SpvDecorationSinglepumpINTEL = 5830;
	public const int SpvDecorationDoublepumpINTEL = 5831;
	public const int SpvDecorationMaxReplicatesINTEL = 5832;
	public const int SpvDecorationSimpleDualPortINTEL = 5833;
	public const int SpvDecorationMergeINTEL = 5834;
	public const int SpvDecorationBankBitsINTEL = 5835;
	public const int SpvDecorationForcePow2DepthINTEL = 5836;
	public const int SpvDecorationBurstCoalesceINTEL = 5899;
	public const int SpvDecorationCacheSizeINTEL = 5900;
	public const int SpvDecorationDontStaticallyCoalesceINTEL = 5901;
	public const int SpvDecorationPrefetchINTEL = 5902;
	public const int SpvDecorationStallEnableINTEL = 5905;
	public const int SpvDecorationFuseLoopsInFunctionINTEL = 5907;
	public const int SpvDecorationBufferLocationINTEL = 5921;
	public const int SpvDecorationIOPipeStorageINTEL = 5944;
	public const int SpvDecorationFunctionFloatingPointModeINTEL = 6080;
	public const int SpvDecorationSingleElementVectorINTEL = 6085;
	public const int SpvDecorationVectorComputeCallableFunctionINTEL = 6087;
	public const int SpvDecorationMediaBlockIOINTEL = 6140;
	public const int SpvDecorationMax = 2147483647;

	// Pseudo enum 'SpvBuiltIn_' @ spirv.h:558:14 (include\spirv\unified1\spirv.h)
	public const int SpvBuiltInPosition = 0;
	public const int SpvBuiltInPointSize = 1;
	public const int SpvBuiltInClipDistance = 3;
	public const int SpvBuiltInCullDistance = 4;
	public const int SpvBuiltInVertexId = 5;
	public const int SpvBuiltInInstanceId = 6;
	public const int SpvBuiltInPrimitiveId = 7;
	public const int SpvBuiltInInvocationId = 8;
	public const int SpvBuiltInLayer = 9;
	public const int SpvBuiltInViewportIndex = 10;
	public const int SpvBuiltInTessLevelOuter = 11;
	public const int SpvBuiltInTessLevelInner = 12;
	public const int SpvBuiltInTessCoord = 13;
	public const int SpvBuiltInPatchVertices = 14;
	public const int SpvBuiltInFragCoord = 15;
	public const int SpvBuiltInPointCoord = 16;
	public const int SpvBuiltInFrontFacing = 17;
	public const int SpvBuiltInSampleId = 18;
	public const int SpvBuiltInSamplePosition = 19;
	public const int SpvBuiltInSampleMask = 20;
	public const int SpvBuiltInFragDepth = 22;
	public const int SpvBuiltInHelperInvocation = 23;
	public const int SpvBuiltInNumWorkgroups = 24;
	public const int SpvBuiltInWorkgroupSize = 25;
	public const int SpvBuiltInWorkgroupId = 26;
	public const int SpvBuiltInLocalInvocationId = 27;
	public const int SpvBuiltInGlobalInvocationId = 28;
	public const int SpvBuiltInLocalInvocationIndex = 29;
	public const int SpvBuiltInWorkDim = 30;
	public const int SpvBuiltInGlobalSize = 31;
	public const int SpvBuiltInEnqueuedWorkgroupSize = 32;
	public const int SpvBuiltInGlobalOffset = 33;
	public const int SpvBuiltInGlobalLinearId = 34;
	public const int SpvBuiltInSubgroupSize = 36;
	public const int SpvBuiltInSubgroupMaxSize = 37;
	public const int SpvBuiltInNumSubgroups = 38;
	public const int SpvBuiltInNumEnqueuedSubgroups = 39;
	public const int SpvBuiltInSubgroupId = 40;
	public const int SpvBuiltInSubgroupLocalInvocationId = 41;
	public const int SpvBuiltInVertexIndex = 42;
	public const int SpvBuiltInInstanceIndex = 43;
	public const int SpvBuiltInSubgroupEqMask = 4416;
	public const int SpvBuiltInSubgroupEqMaskKHR = 4416;
	public const int SpvBuiltInSubgroupGeMask = 4417;
	public const int SpvBuiltInSubgroupGeMaskKHR = 4417;
	public const int SpvBuiltInSubgroupGtMask = 4418;
	public const int SpvBuiltInSubgroupGtMaskKHR = 4418;
	public const int SpvBuiltInSubgroupLeMask = 4419;
	public const int SpvBuiltInSubgroupLeMaskKHR = 4419;
	public const int SpvBuiltInSubgroupLtMask = 4420;
	public const int SpvBuiltInSubgroupLtMaskKHR = 4420;
	public const int SpvBuiltInBaseVertex = 4424;
	public const int SpvBuiltInBaseInstance = 4425;
	public const int SpvBuiltInDrawIndex = 4426;
	public const int SpvBuiltInPrimitiveShadingRateKHR = 4432;
	public const int SpvBuiltInDeviceIndex = 4438;
	public const int SpvBuiltInViewIndex = 4440;
	public const int SpvBuiltInShadingRateKHR = 4444;
	public const int SpvBuiltInBaryCoordNoPerspAMD = 4992;
	public const int SpvBuiltInBaryCoordNoPerspCentroidAMD = 4993;
	public const int SpvBuiltInBaryCoordNoPerspSampleAMD = 4994;
	public const int SpvBuiltInBaryCoordSmoothAMD = 4995;
	public const int SpvBuiltInBaryCoordSmoothCentroidAMD = 4996;
	public const int SpvBuiltInBaryCoordSmoothSampleAMD = 4997;
	public const int SpvBuiltInBaryCoordPullModelAMD = 4998;
	public const int SpvBuiltInFragStencilRefEXT = 5014;
	public const int SpvBuiltInViewportMaskNV = 5253;
	public const int SpvBuiltInSecondaryPositionNV = 5257;
	public const int SpvBuiltInSecondaryViewportMaskNV = 5258;
	public const int SpvBuiltInPositionPerViewNV = 5261;
	public const int SpvBuiltInViewportMaskPerViewNV = 5262;
	public const int SpvBuiltInFullyCoveredEXT = 5264;
	public const int SpvBuiltInTaskCountNV = 5274;
	public const int SpvBuiltInPrimitiveCountNV = 5275;
	public const int SpvBuiltInPrimitiveIndicesNV = 5276;
	public const int SpvBuiltInClipDistancePerViewNV = 5277;
	public const int SpvBuiltInCullDistancePerViewNV = 5278;
	public const int SpvBuiltInLayerPerViewNV = 5279;
	public const int SpvBuiltInMeshViewCountNV = 5280;
	public const int SpvBuiltInMeshViewIndicesNV = 5281;
	public const int SpvBuiltInBaryCoordKHR = 5286;
	public const int SpvBuiltInBaryCoordNV = 5286;
	public const int SpvBuiltInBaryCoordNoPerspKHR = 5287;
	public const int SpvBuiltInBaryCoordNoPerspNV = 5287;
	public const int SpvBuiltInFragSizeEXT = 5292;
	public const int SpvBuiltInFragmentSizeNV = 5292;
	public const int SpvBuiltInFragInvocationCountEXT = 5293;
	public const int SpvBuiltInInvocationsPerPixelNV = 5293;
	public const int SpvBuiltInLaunchIdKHR = 5319;
	public const int SpvBuiltInLaunchIdNV = 5319;
	public const int SpvBuiltInLaunchSizeKHR = 5320;
	public const int SpvBuiltInLaunchSizeNV = 5320;
	public const int SpvBuiltInWorldRayOriginKHR = 5321;
	public const int SpvBuiltInWorldRayOriginNV = 5321;
	public const int SpvBuiltInWorldRayDirectionKHR = 5322;
	public const int SpvBuiltInWorldRayDirectionNV = 5322;
	public const int SpvBuiltInObjectRayOriginKHR = 5323;
	public const int SpvBuiltInObjectRayOriginNV = 5323;
	public const int SpvBuiltInObjectRayDirectionKHR = 5324;
	public const int SpvBuiltInObjectRayDirectionNV = 5324;
	public const int SpvBuiltInRayTminKHR = 5325;
	public const int SpvBuiltInRayTminNV = 5325;
	public const int SpvBuiltInRayTmaxKHR = 5326;
	public const int SpvBuiltInRayTmaxNV = 5326;
	public const int SpvBuiltInInstanceCustomIndexKHR = 5327;
	public const int SpvBuiltInInstanceCustomIndexNV = 5327;
	public const int SpvBuiltInObjectToWorldKHR = 5330;
	public const int SpvBuiltInObjectToWorldNV = 5330;
	public const int SpvBuiltInWorldToObjectKHR = 5331;
	public const int SpvBuiltInWorldToObjectNV = 5331;
	public const int SpvBuiltInHitTNV = 5332;
	public const int SpvBuiltInHitKindKHR = 5333;
	public const int SpvBuiltInHitKindNV = 5333;
	public const int SpvBuiltInCurrentRayTimeNV = 5334;
	public const int SpvBuiltInIncomingRayFlagsKHR = 5351;
	public const int SpvBuiltInIncomingRayFlagsNV = 5351;
	public const int SpvBuiltInRayGeometryIndexKHR = 5352;
	public const int SpvBuiltInWarpsPerSMNV = 5374;
	public const int SpvBuiltInSMCountNV = 5375;
	public const int SpvBuiltInWarpIDNV = 5376;
	public const int SpvBuiltInSMIDNV = 5377;
	public const int SpvBuiltInMax = 2147483647;

	// Pseudo enum 'SpvSelectionControlShift_' @ spirv.h:683:14 (include\spirv\unified1\spirv.h)
	public const int SpvSelectionControlFlattenShift = 0;
	public const int SpvSelectionControlDontFlattenShift = 1;
	public const int SpvSelectionControlMax = 2147483647;

	// Pseudo enum 'SpvSelectionControlMask_' @ spirv.h:689:14 (include\spirv\unified1\spirv.h)
	public const int SpvSelectionControlMaskNone = 0;
	public const int SpvSelectionControlFlattenMask = 1;
	public const int SpvSelectionControlDontFlattenMask = 2;

	// Pseudo enum 'SpvLoopControlShift_' @ spirv.h:695:14 (include\spirv\unified1\spirv.h)
	public const int SpvLoopControlUnrollShift = 0;
	public const int SpvLoopControlDontUnrollShift = 1;
	public const int SpvLoopControlDependencyInfiniteShift = 2;
	public const int SpvLoopControlDependencyLengthShift = 3;
	public const int SpvLoopControlMinIterationsShift = 4;
	public const int SpvLoopControlMaxIterationsShift = 5;
	public const int SpvLoopControlIterationMultipleShift = 6;
	public const int SpvLoopControlPeelCountShift = 7;
	public const int SpvLoopControlPartialCountShift = 8;
	public const int SpvLoopControlInitiationIntervalINTELShift = 16;
	public const int SpvLoopControlMaxConcurrencyINTELShift = 17;
	public const int SpvLoopControlDependencyArrayINTELShift = 18;
	public const int SpvLoopControlPipelineEnableINTELShift = 19;
	public const int SpvLoopControlLoopCoalesceINTELShift = 20;
	public const int SpvLoopControlMaxInterleavingINTELShift = 21;
	public const int SpvLoopControlSpeculatedIterationsINTELShift = 22;
	public const int SpvLoopControlNoFusionINTELShift = 23;
	public const int SpvLoopControlMax = 2147483647;

	// Pseudo enum 'SpvLoopControlMask_' @ spirv.h:716:14 (include\spirv\unified1\spirv.h)
	public const int SpvLoopControlMaskNone = 0;
	public const int SpvLoopControlUnrollMask = 1;
	public const int SpvLoopControlDontUnrollMask = 2;
	public const int SpvLoopControlDependencyInfiniteMask = 4;
	public const int SpvLoopControlDependencyLengthMask = 8;
	public const int SpvLoopControlMinIterationsMask = 16;
	public const int SpvLoopControlMaxIterationsMask = 32;
	public const int SpvLoopControlIterationMultipleMask = 64;
	public const int SpvLoopControlPeelCountMask = 128;
	public const int SpvLoopControlPartialCountMask = 256;
	public const int SpvLoopControlInitiationIntervalINTELMask = 65536;
	public const int SpvLoopControlMaxConcurrencyINTELMask = 131072;
	public const int SpvLoopControlDependencyArrayINTELMask = 262144;
	public const int SpvLoopControlPipelineEnableINTELMask = 524288;
	public const int SpvLoopControlLoopCoalesceINTELMask = 1048576;
	public const int SpvLoopControlMaxInterleavingINTELMask = 2097152;
	public const int SpvLoopControlSpeculatedIterationsINTELMask = 4194304;
	public const int SpvLoopControlNoFusionINTELMask = 8388608;

	// Pseudo enum 'SpvFunctionControlShift_' @ spirv.h:737:14 (include\spirv\unified1\spirv.h)
	public const int SpvFunctionControlInlineShift = 0;
	public const int SpvFunctionControlDontInlineShift = 1;
	public const int SpvFunctionControlPureShift = 2;
	public const int SpvFunctionControlConstShift = 3;
	public const int SpvFunctionControlOptNoneINTELShift = 16;
	public const int SpvFunctionControlMax = 2147483647;

	// Pseudo enum 'SpvFunctionControlMask_' @ spirv.h:746:14 (include\spirv\unified1\spirv.h)
	public const int SpvFunctionControlMaskNone = 0;
	public const int SpvFunctionControlInlineMask = 1;
	public const int SpvFunctionControlDontInlineMask = 2;
	public const int SpvFunctionControlPureMask = 4;
	public const int SpvFunctionControlConstMask = 8;
	public const int SpvFunctionControlOptNoneINTELMask = 65536;

	// Pseudo enum 'SpvMemorySemanticsShift_' @ spirv.h:755:14 (include\spirv\unified1\spirv.h)
	public const int SpvMemorySemanticsAcquireShift = 1;
	public const int SpvMemorySemanticsReleaseShift = 2;
	public const int SpvMemorySemanticsAcquireReleaseShift = 3;
	public const int SpvMemorySemanticsSequentiallyConsistentShift = 4;
	public const int SpvMemorySemanticsUniformMemoryShift = 6;
	public const int SpvMemorySemanticsSubgroupMemoryShift = 7;
	public const int SpvMemorySemanticsWorkgroupMemoryShift = 8;
	public const int SpvMemorySemanticsCrossWorkgroupMemoryShift = 9;
	public const int SpvMemorySemanticsAtomicCounterMemoryShift = 10;
	public const int SpvMemorySemanticsImageMemoryShift = 11;
	public const int SpvMemorySemanticsOutputMemoryShift = 12;
	public const int SpvMemorySemanticsOutputMemoryKHRShift = 12;
	public const int SpvMemorySemanticsMakeAvailableShift = 13;
	public const int SpvMemorySemanticsMakeAvailableKHRShift = 13;
	public const int SpvMemorySemanticsMakeVisibleShift = 14;
	public const int SpvMemorySemanticsMakeVisibleKHRShift = 14;
	public const int SpvMemorySemanticsVolatileShift = 15;
	public const int SpvMemorySemanticsMax = 2147483647;

	// Pseudo enum 'SpvMemorySemanticsMask_' @ spirv.h:776:14 (include\spirv\unified1\spirv.h)
	public const int SpvMemorySemanticsMaskNone = 0;
	public const int SpvMemorySemanticsAcquireMask = 2;
	public const int SpvMemorySemanticsReleaseMask = 4;
	public const int SpvMemorySemanticsAcquireReleaseMask = 8;
	public const int SpvMemorySemanticsSequentiallyConsistentMask = 16;
	public const int SpvMemorySemanticsUniformMemoryMask = 64;
	public const int SpvMemorySemanticsSubgroupMemoryMask = 128;
	public const int SpvMemorySemanticsWorkgroupMemoryMask = 256;
	public const int SpvMemorySemanticsCrossWorkgroupMemoryMask = 512;
	public const int SpvMemorySemanticsAtomicCounterMemoryMask = 1024;
	public const int SpvMemorySemanticsImageMemoryMask = 2048;
	public const int SpvMemorySemanticsOutputMemoryMask = 4096;
	public const int SpvMemorySemanticsOutputMemoryKHRMask = 4096;
	public const int SpvMemorySemanticsMakeAvailableMask = 8192;
	public const int SpvMemorySemanticsMakeAvailableKHRMask = 8192;
	public const int SpvMemorySemanticsMakeVisibleMask = 16384;
	public const int SpvMemorySemanticsMakeVisibleKHRMask = 16384;
	public const int SpvMemorySemanticsVolatileMask = 32768;

	// Pseudo enum 'SpvMemoryAccessShift_' @ spirv.h:797:14 (include\spirv\unified1\spirv.h)
	public const int SpvMemoryAccessVolatileShift = 0;
	public const int SpvMemoryAccessAlignedShift = 1;
	public const int SpvMemoryAccessNontemporalShift = 2;
	public const int SpvMemoryAccessMakePointerAvailableShift = 3;
	public const int SpvMemoryAccessMakePointerAvailableKHRShift = 3;
	public const int SpvMemoryAccessMakePointerVisibleShift = 4;
	public const int SpvMemoryAccessMakePointerVisibleKHRShift = 4;
	public const int SpvMemoryAccessNonPrivatePointerShift = 5;
	public const int SpvMemoryAccessNonPrivatePointerKHRShift = 5;
	public const int SpvMemoryAccessMax = 2147483647;

	// Pseudo enum 'SpvMemoryAccessMask_' @ spirv.h:810:14 (include\spirv\unified1\spirv.h)
	public const int SpvMemoryAccessMaskNone = 0;
	public const int SpvMemoryAccessVolatileMask = 1;
	public const int SpvMemoryAccessAlignedMask = 2;
	public const int SpvMemoryAccessNontemporalMask = 4;
	public const int SpvMemoryAccessMakePointerAvailableMask = 8;
	public const int SpvMemoryAccessMakePointerAvailableKHRMask = 8;
	public const int SpvMemoryAccessMakePointerVisibleMask = 16;
	public const int SpvMemoryAccessMakePointerVisibleKHRMask = 16;
	public const int SpvMemoryAccessNonPrivatePointerMask = 32;
	public const int SpvMemoryAccessNonPrivatePointerKHRMask = 32;

	// Pseudo enum 'SpvScope_' @ spirv.h:823:14 (include\spirv\unified1\spirv.h)
	public const int SpvScopeCrossDevice = 0;
	public const int SpvScopeDevice = 1;
	public const int SpvScopeWorkgroup = 2;
	public const int SpvScopeSubgroup = 3;
	public const int SpvScopeInvocation = 4;
	public const int SpvScopeQueueFamily = 5;
	public const int SpvScopeQueueFamilyKHR = 5;
	public const int SpvScopeShaderCallKHR = 6;
	public const int SpvScopeMax = 2147483647;

	// Pseudo enum 'SpvGroupOperation_' @ spirv.h:835:14 (include\spirv\unified1\spirv.h)
	public const int SpvGroupOperationReduce = 0;
	public const int SpvGroupOperationInclusiveScan = 1;
	public const int SpvGroupOperationExclusiveScan = 2;
	public const int SpvGroupOperationClusteredReduce = 3;
	public const int SpvGroupOperationPartitionedReduceNV = 6;
	public const int SpvGroupOperationPartitionedInclusiveScanNV = 7;
	public const int SpvGroupOperationPartitionedExclusiveScanNV = 8;
	public const int SpvGroupOperationMax = 2147483647;

	// Pseudo enum 'SpvKernelEnqueueFlags_' @ spirv.h:846:14 (include\spirv\unified1\spirv.h)
	public const int SpvKernelEnqueueFlagsNoWait = 0;
	public const int SpvKernelEnqueueFlagsWaitKernel = 1;
	public const int SpvKernelEnqueueFlagsWaitWorkGroup = 2;
	public const int SpvKernelEnqueueFlagsMax = 2147483647;

	// Pseudo enum 'SpvKernelProfilingInfoShift_' @ spirv.h:853:14 (include\spirv\unified1\spirv.h)
	public const int SpvKernelProfilingInfoCmdExecTimeShift = 0;
	public const int SpvKernelProfilingInfoMax = 2147483647;

	// Pseudo enum 'SpvKernelProfilingInfoMask_' @ spirv.h:858:14 (include\spirv\unified1\spirv.h)
	public const int SpvKernelProfilingInfoMaskNone = 0;
	public const int SpvKernelProfilingInfoCmdExecTimeMask = 1;

	// Pseudo enum 'SpvCapability_' @ spirv.h:863:14 (include\spirv\unified1\spirv.h)
	public const int SpvCapabilityMatrix = 0;
	public const int SpvCapabilityShader = 1;
	public const int SpvCapabilityGeometry = 2;
	public const int SpvCapabilityTessellation = 3;
	public const int SpvCapabilityAddresses = 4;
	public const int SpvCapabilityLinkage = 5;
	public const int SpvCapabilityKernel = 6;
	public const int SpvCapabilityVector16 = 7;
	public const int SpvCapabilityFloat16Buffer = 8;
	public const int SpvCapabilityFloat16 = 9;
	public const int SpvCapabilityFloat64 = 10;
	public const int SpvCapabilityInt64 = 11;
	public const int SpvCapabilityInt64Atomics = 12;
	public const int SpvCapabilityImageBasic = 13;
	public const int SpvCapabilityImageReadWrite = 14;
	public const int SpvCapabilityImageMipmap = 15;
	public const int SpvCapabilityPipes = 17;
	public const int SpvCapabilityGroups = 18;
	public const int SpvCapabilityDeviceEnqueue = 19;
	public const int SpvCapabilityLiteralSampler = 20;
	public const int SpvCapabilityAtomicStorage = 21;
	public const int SpvCapabilityInt16 = 22;
	public const int SpvCapabilityTessellationPointSize = 23;
	public const int SpvCapabilityGeometryPointSize = 24;
	public const int SpvCapabilityImageGatherExtended = 25;
	public const int SpvCapabilityStorageImageMultisample = 27;
	public const int SpvCapabilityUniformBufferArrayDynamicIndexing = 28;
	public const int SpvCapabilitySampledImageArrayDynamicIndexing = 29;
	public const int SpvCapabilityStorageBufferArrayDynamicIndexing = 30;
	public const int SpvCapabilityStorageImageArrayDynamicIndexing = 31;
	public const int SpvCapabilityClipDistance = 32;
	public const int SpvCapabilityCullDistance = 33;
	public const int SpvCapabilityImageCubeArray = 34;
	public const int SpvCapabilitySampleRateShading = 35;
	public const int SpvCapabilityImageRect = 36;
	public const int SpvCapabilitySampledRect = 37;
	public const int SpvCapabilityGenericPointer = 38;
	public const int SpvCapabilityInt8 = 39;
	public const int SpvCapabilityInputAttachment = 40;
	public const int SpvCapabilitySparseResidency = 41;
	public const int SpvCapabilityMinLod = 42;
	public const int SpvCapabilitySampled1D = 43;
	public const int SpvCapabilityImage1D = 44;
	public const int SpvCapabilitySampledCubeArray = 45;
	public const int SpvCapabilitySampledBuffer = 46;
	public const int SpvCapabilityImageBuffer = 47;
	public const int SpvCapabilityImageMSArray = 48;
	public const int SpvCapabilityStorageImageExtendedFormats = 49;
	public const int SpvCapabilityImageQuery = 50;
	public const int SpvCapabilityDerivativeControl = 51;
	public const int SpvCapabilityInterpolationFunction = 52;
	public const int SpvCapabilityTransformFeedback = 53;
	public const int SpvCapabilityGeometryStreams = 54;
	public const int SpvCapabilityStorageImageReadWithoutFormat = 55;
	public const int SpvCapabilityStorageImageWriteWithoutFormat = 56;
	public const int SpvCapabilityMultiViewport = 57;
	public const int SpvCapabilitySubgroupDispatch = 58;
	public const int SpvCapabilityNamedBarrier = 59;
	public const int SpvCapabilityPipeStorage = 60;
	public const int SpvCapabilityGroupNonUniform = 61;
	public const int SpvCapabilityGroupNonUniformVote = 62;
	public const int SpvCapabilityGroupNonUniformArithmetic = 63;
	public const int SpvCapabilityGroupNonUniformBallot = 64;
	public const int SpvCapabilityGroupNonUniformShuffle = 65;
	public const int SpvCapabilityGroupNonUniformShuffleRelative = 66;
	public const int SpvCapabilityGroupNonUniformClustered = 67;
	public const int SpvCapabilityGroupNonUniformQuad = 68;
	public const int SpvCapabilityShaderLayer = 69;
	public const int SpvCapabilityShaderViewportIndex = 70;
	public const int SpvCapabilityUniformDecoration = 71;
	public const int SpvCapabilityFragmentShadingRateKHR = 4422;
	public const int SpvCapabilitySubgroupBallotKHR = 4423;
	public const int SpvCapabilityDrawParameters = 4427;
	public const int SpvCapabilityWorkgroupMemoryExplicitLayoutKHR = 4428;
	public const int SpvCapabilityWorkgroupMemoryExplicitLayout8BitAccessKHR = 4429;
	public const int SpvCapabilityWorkgroupMemoryExplicitLayout16BitAccessKHR = 4430;
	public const int SpvCapabilitySubgroupVoteKHR = 4431;
	public const int SpvCapabilityStorageBuffer16BitAccess = 4433;
	public const int SpvCapabilityStorageUniformBufferBlock16 = 4433;
	public const int SpvCapabilityStorageUniform16 = 4434;
	public const int SpvCapabilityUniformAndStorageBuffer16BitAccess = 4434;
	public const int SpvCapabilityStoragePushConstant16 = 4435;
	public const int SpvCapabilityStorageInputOutput16 = 4436;
	public const int SpvCapabilityDeviceGroup = 4437;
	public const int SpvCapabilityMultiView = 4439;
	public const int SpvCapabilityVariablePointersStorageBuffer = 4441;
	public const int SpvCapabilityVariablePointers = 4442;
	public const int SpvCapabilityAtomicStorageOps = 4445;
	public const int SpvCapabilitySampleMaskPostDepthCoverage = 4447;
	public const int SpvCapabilityStorageBuffer8BitAccess = 4448;
	public const int SpvCapabilityUniformAndStorageBuffer8BitAccess = 4449;
	public const int SpvCapabilityStoragePushConstant8 = 4450;
	public const int SpvCapabilityDenormPreserve = 4464;
	public const int SpvCapabilityDenormFlushToZero = 4465;
	public const int SpvCapabilitySignedZeroInfNanPreserve = 4466;
	public const int SpvCapabilityRoundingModeRTE = 4467;
	public const int SpvCapabilityRoundingModeRTZ = 4468;
	public const int SpvCapabilityRayQueryProvisionalKHR = 4471;
	public const int SpvCapabilityRayQueryKHR = 4472;
	public const int SpvCapabilityRayTraversalPrimitiveCullingKHR = 4478;
	public const int SpvCapabilityRayTracingKHR = 4479;
	public const int SpvCapabilityFloat16ImageAMD = 5008;
	public const int SpvCapabilityImageGatherBiasLodAMD = 5009;
	public const int SpvCapabilityFragmentMaskAMD = 5010;
	public const int SpvCapabilityStencilExportEXT = 5013;
	public const int SpvCapabilityImageReadWriteLodAMD = 5015;
	public const int SpvCapabilityInt64ImageEXT = 5016;
	public const int SpvCapabilityShaderClockKHR = 5055;
	public const int SpvCapabilitySampleMaskOverrideCoverageNV = 5249;
	public const int SpvCapabilityGeometryShaderPassthroughNV = 5251;
	public const int SpvCapabilityShaderViewportIndexLayerEXT = 5254;
	public const int SpvCapabilityShaderViewportIndexLayerNV = 5254;
	public const int SpvCapabilityShaderViewportMaskNV = 5255;
	public const int SpvCapabilityShaderStereoViewNV = 5259;
	public const int SpvCapabilityPerViewAttributesNV = 5260;
	public const int SpvCapabilityFragmentFullyCoveredEXT = 5265;
	public const int SpvCapabilityMeshShadingNV = 5266;
	public const int SpvCapabilityImageFootprintNV = 5282;
	public const int SpvCapabilityFragmentBarycentricKHR = 5284;
	public const int SpvCapabilityFragmentBarycentricNV = 5284;
	public const int SpvCapabilityComputeDerivativeGroupQuadsNV = 5288;
	public const int SpvCapabilityFragmentDensityEXT = 5291;
	public const int SpvCapabilityShadingRateNV = 5291;
	public const int SpvCapabilityGroupNonUniformPartitionedNV = 5297;
	public const int SpvCapabilityShaderNonUniform = 5301;
	public const int SpvCapabilityShaderNonUniformEXT = 5301;
	public const int SpvCapabilityRuntimeDescriptorArray = 5302;
	public const int SpvCapabilityRuntimeDescriptorArrayEXT = 5302;
	public const int SpvCapabilityInputAttachmentArrayDynamicIndexing = 5303;
	public const int SpvCapabilityInputAttachmentArrayDynamicIndexingEXT = 5303;
	public const int SpvCapabilityUniformTexelBufferArrayDynamicIndexing = 5304;
	public const int SpvCapabilityUniformTexelBufferArrayDynamicIndexingEXT = 5304;
	public const int SpvCapabilityStorageTexelBufferArrayDynamicIndexing = 5305;
	public const int SpvCapabilityStorageTexelBufferArrayDynamicIndexingEXT = 5305;
	public const int SpvCapabilityUniformBufferArrayNonUniformIndexing = 5306;
	public const int SpvCapabilityUniformBufferArrayNonUniformIndexingEXT = 5306;
	public const int SpvCapabilitySampledImageArrayNonUniformIndexing = 5307;
	public const int SpvCapabilitySampledImageArrayNonUniformIndexingEXT = 5307;
	public const int SpvCapabilityStorageBufferArrayNonUniformIndexing = 5308;
	public const int SpvCapabilityStorageBufferArrayNonUniformIndexingEXT = 5308;
	public const int SpvCapabilityStorageImageArrayNonUniformIndexing = 5309;
	public const int SpvCapabilityStorageImageArrayNonUniformIndexingEXT = 5309;
	public const int SpvCapabilityInputAttachmentArrayNonUniformIndexing = 5310;
	public const int SpvCapabilityInputAttachmentArrayNonUniformIndexingEXT = 5310;
	public const int SpvCapabilityUniformTexelBufferArrayNonUniformIndexing = 5311;
	public const int SpvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT = 5311;
	public const int SpvCapabilityStorageTexelBufferArrayNonUniformIndexing = 5312;
	public const int SpvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT = 5312;
	public const int SpvCapabilityRayTracingNV = 5340;
	public const int SpvCapabilityRayTracingMotionBlurNV = 5341;
	public const int SpvCapabilityVulkanMemoryModel = 5345;
	public const int SpvCapabilityVulkanMemoryModelKHR = 5345;
	public const int SpvCapabilityVulkanMemoryModelDeviceScope = 5346;
	public const int SpvCapabilityVulkanMemoryModelDeviceScopeKHR = 5346;
	public const int SpvCapabilityPhysicalStorageBufferAddresses = 5347;
	public const int SpvCapabilityPhysicalStorageBufferAddressesEXT = 5347;
	public const int SpvCapabilityComputeDerivativeGroupLinearNV = 5350;
	public const int SpvCapabilityRayTracingProvisionalKHR = 5353;
	public const int SpvCapabilityCooperativeMatrixNV = 5357;
	public const int SpvCapabilityFragmentShaderSampleInterlockEXT = 5363;
	public const int SpvCapabilityFragmentShaderShadingRateInterlockEXT = 5372;
	public const int SpvCapabilityShaderSMBuiltinsNV = 5373;
	public const int SpvCapabilityFragmentShaderPixelInterlockEXT = 5378;
	public const int SpvCapabilityDemoteToHelperInvocation = 5379;
	public const int SpvCapabilityDemoteToHelperInvocationEXT = 5379;
	public const int SpvCapabilityBindlessTextureNV = 5390;
	public const int SpvCapabilitySubgroupShuffleINTEL = 5568;
	public const int SpvCapabilitySubgroupBufferBlockIOINTEL = 5569;
	public const int SpvCapabilitySubgroupImageBlockIOINTEL = 5570;
	public const int SpvCapabilitySubgroupImageMediaBlockIOINTEL = 5579;
	public const int SpvCapabilityRoundToInfinityINTEL = 5582;
	public const int SpvCapabilityFloatingPointModeINTEL = 5583;
	public const int SpvCapabilityIntegerFunctions2INTEL = 5584;
	public const int SpvCapabilityFunctionPointersINTEL = 5603;
	public const int SpvCapabilityIndirectReferencesINTEL = 5604;
	public const int SpvCapabilityAsmINTEL = 5606;
	public const int SpvCapabilityAtomicFloat32MinMaxEXT = 5612;
	public const int SpvCapabilityAtomicFloat64MinMaxEXT = 5613;
	public const int SpvCapabilityAtomicFloat16MinMaxEXT = 5616;
	public const int SpvCapabilityVectorComputeINTEL = 5617;
	public const int SpvCapabilityVectorAnyINTEL = 5619;
	public const int SpvCapabilityExpectAssumeKHR = 5629;
	public const int SpvCapabilitySubgroupAvcMotionEstimationINTEL = 5696;
	public const int SpvCapabilitySubgroupAvcMotionEstimationIntraINTEL = 5697;
	public const int SpvCapabilitySubgroupAvcMotionEstimationChromaINTEL = 5698;
	public const int SpvCapabilityVariableLengthArrayINTEL = 5817;
	public const int SpvCapabilityFunctionFloatControlINTEL = 5821;
	public const int SpvCapabilityFPGAMemoryAttributesINTEL = 5824;
	public const int SpvCapabilityFPFastMathModeINTEL = 5837;
	public const int SpvCapabilityArbitraryPrecisionIntegersINTEL = 5844;
	public const int SpvCapabilityArbitraryPrecisionFloatingPointINTEL = 5845;
	public const int SpvCapabilityUnstructuredLoopControlsINTEL = 5886;
	public const int SpvCapabilityFPGALoopControlsINTEL = 5888;
	public const int SpvCapabilityKernelAttributesINTEL = 5892;
	public const int SpvCapabilityFPGAKernelAttributesINTEL = 5897;
	public const int SpvCapabilityFPGAMemoryAccessesINTEL = 5898;
	public const int SpvCapabilityFPGAClusterAttributesINTEL = 5904;
	public const int SpvCapabilityLoopFuseINTEL = 5906;
	public const int SpvCapabilityFPGABufferLocationINTEL = 5920;
	public const int SpvCapabilityArbitraryPrecisionFixedPointINTEL = 5922;
	public const int SpvCapabilityUSMStorageClassesINTEL = 5935;
	public const int SpvCapabilityIOPipesINTEL = 5943;
	public const int SpvCapabilityBlockingPipesINTEL = 5945;
	public const int SpvCapabilityFPGARegINTEL = 5948;
	public const int SpvCapabilityDotProductInputAll = 6016;
	public const int SpvCapabilityDotProductInputAllKHR = 6016;
	public const int SpvCapabilityDotProductInput4x8Bit = 6017;
	public const int SpvCapabilityDotProductInput4x8BitKHR = 6017;
	public const int SpvCapabilityDotProductInput4x8BitPacked = 6018;
	public const int SpvCapabilityDotProductInput4x8BitPackedKHR = 6018;
	public const int SpvCapabilityDotProduct = 6019;
	public const int SpvCapabilityDotProductKHR = 6019;
	public const int SpvCapabilityBitInstructions = 6025;
	public const int SpvCapabilityAtomicFloat32AddEXT = 6033;
	public const int SpvCapabilityAtomicFloat64AddEXT = 6034;
	public const int SpvCapabilityLongConstantCompositeINTEL = 6089;
	public const int SpvCapabilityOptNoneINTEL = 6094;
	public const int SpvCapabilityAtomicFloat16AddEXT = 6095;
	public const int SpvCapabilityDebugInfoModuleINTEL = 6114;
	public const int SpvCapabilityMax = 2147483647;

	// Pseudo enum 'SpvRayFlagsShift_' @ spirv.h:1086:14 (include\spirv\unified1\spirv.h)
	public const int SpvRayFlagsOpaqueKHRShift = 0;
	public const int SpvRayFlagsNoOpaqueKHRShift = 1;
	public const int SpvRayFlagsTerminateOnFirstHitKHRShift = 2;
	public const int SpvRayFlagsSkipClosestHitShaderKHRShift = 3;
	public const int SpvRayFlagsCullBackFacingTrianglesKHRShift = 4;
	public const int SpvRayFlagsCullFrontFacingTrianglesKHRShift = 5;
	public const int SpvRayFlagsCullOpaqueKHRShift = 6;
	public const int SpvRayFlagsCullNoOpaqueKHRShift = 7;
	public const int SpvRayFlagsSkipTrianglesKHRShift = 8;
	public const int SpvRayFlagsSkipAABBsKHRShift = 9;
	public const int SpvRayFlagsMax = 2147483647;

	// Pseudo enum 'SpvRayFlagsMask_' @ spirv.h:1100:14 (include\spirv\unified1\spirv.h)
	public const int SpvRayFlagsMaskNone = 0;
	public const int SpvRayFlagsOpaqueKHRMask = 1;
	public const int SpvRayFlagsNoOpaqueKHRMask = 2;
	public const int SpvRayFlagsTerminateOnFirstHitKHRMask = 4;
	public const int SpvRayFlagsSkipClosestHitShaderKHRMask = 8;
	public const int SpvRayFlagsCullBackFacingTrianglesKHRMask = 16;
	public const int SpvRayFlagsCullFrontFacingTrianglesKHRMask = 32;
	public const int SpvRayFlagsCullOpaqueKHRMask = 64;
	public const int SpvRayFlagsCullNoOpaqueKHRMask = 128;
	public const int SpvRayFlagsSkipTrianglesKHRMask = 256;
	public const int SpvRayFlagsSkipAABBsKHRMask = 512;

	// Pseudo enum 'SpvRayQueryIntersection_' @ spirv.h:1114:14 (include\spirv\unified1\spirv.h)
	public const int SpvRayQueryIntersectionRayQueryCandidateIntersectionKHR = 0;
	public const int SpvRayQueryIntersectionRayQueryCommittedIntersectionKHR = 1;
	public const int SpvRayQueryIntersectionMax = 2147483647;

	// Pseudo enum 'SpvRayQueryCommittedIntersectionType_' @ spirv.h:1120:14 (include\spirv\unified1\spirv.h)
	public const int SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKHR = 0;
	public const int SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKHR = 1;
	public const int SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKHR = 2;
	public const int SpvRayQueryCommittedIntersectionTypeMax = 2147483647;

	// Pseudo enum 'SpvRayQueryCandidateIntersectionType_' @ spirv.h:1127:14 (include\spirv\unified1\spirv.h)
	public const int SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKHR = 0;
	public const int SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAABBKHR = 1;
	public const int SpvRayQueryCandidateIntersectionTypeMax = 2147483647;

	// Pseudo enum 'SpvFragmentShadingRateShift_' @ spirv.h:1133:14 (include\spirv\unified1\spirv.h)
	public const int SpvFragmentShadingRateVertical2PixelsShift = 0;
	public const int SpvFragmentShadingRateVertical4PixelsShift = 1;
	public const int SpvFragmentShadingRateHorizontal2PixelsShift = 2;
	public const int SpvFragmentShadingRateHorizontal4PixelsShift = 3;
	public const int SpvFragmentShadingRateMax = 2147483647;

	// Pseudo enum 'SpvFragmentShadingRateMask_' @ spirv.h:1141:14 (include\spirv\unified1\spirv.h)
	public const int SpvFragmentShadingRateMaskNone = 0;
	public const int SpvFragmentShadingRateVertical2PixelsMask = 1;
	public const int SpvFragmentShadingRateVertical4PixelsMask = 2;
	public const int SpvFragmentShadingRateHorizontal2PixelsMask = 4;
	public const int SpvFragmentShadingRateHorizontal4PixelsMask = 8;

	// Pseudo enum 'SpvFPDenormMode_' @ spirv.h:1149:14 (include\spirv\unified1\spirv.h)
	public const int SpvFPDenormModePreserve = 0;
	public const int SpvFPDenormModeFlushToZero = 1;
	public const int SpvFPDenormModeMax = 2147483647;

	// Pseudo enum 'SpvFPOperationMode_' @ spirv.h:1155:14 (include\spirv\unified1\spirv.h)
	public const int SpvFPOperationModeIEEE = 0;
	public const int SpvFPOperationModeALT = 1;
	public const int SpvFPOperationModeMax = 2147483647;

	// Pseudo enum 'SpvQuantizationModes_' @ spirv.h:1161:14 (include\spirv\unified1\spirv.h)
	public const int SpvQuantizationModesTRN = 0;
	public const int SpvQuantizationModesTRN_ZERO = 1;
	public const int SpvQuantizationModesRND = 2;
	public const int SpvQuantizationModesRND_ZERO = 3;
	public const int SpvQuantizationModesRND_INF = 4;
	public const int SpvQuantizationModesRND_MIN_INF = 5;
	public const int SpvQuantizationModesRND_CONV = 6;
	public const int SpvQuantizationModesRND_CONV_ODD = 7;
	public const int SpvQuantizationModesMax = 2147483647;

	// Pseudo enum 'SpvOverflowModes_' @ spirv.h:1173:14 (include\spirv\unified1\spirv.h)
	public const int SpvOverflowModesWRAP = 0;
	public const int SpvOverflowModesSAT = 1;
	public const int SpvOverflowModesSAT_ZERO = 2;
	public const int SpvOverflowModesSAT_SYM = 3;
	public const int SpvOverflowModesMax = 2147483647;

	// Pseudo enum 'SpvPackedVectorFormat_' @ spirv.h:1181:14 (include\spirv\unified1\spirv.h)
	public const int SpvPackedVectorFormatPackedVectorFormat4x8Bit = 0;
	public const int SpvPackedVectorFormatPackedVectorFormat4x8BitKHR = 0;
	public const int SpvPackedVectorFormatMax = 2147483647;

	// Pseudo enum 'SpvOp_' @ spirv.h:1187:14 (include\spirv\unified1\spirv.h)
	public const int SpvOpNop = 0;
	public const int SpvOpUndef = 1;
	public const int SpvOpSourceContinued = 2;
	public const int SpvOpSource = 3;
	public const int SpvOpSourceExtension = 4;
	public const int SpvOpName = 5;
	public const int SpvOpMemberName = 6;
	public const int SpvOpString = 7;
	public const int SpvOpLine = 8;
	public const int SpvOpExtension = 10;
	public const int SpvOpExtInstImport = 11;
	public const int SpvOpExtInst = 12;
	public const int SpvOpMemoryModel = 14;
	public const int SpvOpEntryPoint = 15;
	public const int SpvOpExecutionMode = 16;
	public const int SpvOpCapability = 17;
	public const int SpvOpTypeVoid = 19;
	public const int SpvOpTypeBool = 20;
	public const int SpvOpTypeInt = 21;
	public const int SpvOpTypeFloat = 22;
	public const int SpvOpTypeVector = 23;
	public const int SpvOpTypeMatrix = 24;
	public const int SpvOpTypeImage = 25;
	public const int SpvOpTypeSampler = 26;
	public const int SpvOpTypeSampledImage = 27;
	public const int SpvOpTypeArray = 28;
	public const int SpvOpTypeRuntimeArray = 29;
	public const int SpvOpTypeStruct = 30;
	public const int SpvOpTypeOpaque = 31;
	public const int SpvOpTypePointer = 32;
	public const int SpvOpTypeFunction = 33;
	public const int SpvOpTypeEvent = 34;
	public const int SpvOpTypeDeviceEvent = 35;
	public const int SpvOpTypeReserveId = 36;
	public const int SpvOpTypeQueue = 37;
	public const int SpvOpTypePipe = 38;
	public const int SpvOpTypeForwardPointer = 39;
	public const int SpvOpConstantTrue = 41;
	public const int SpvOpConstantFalse = 42;
	public const int SpvOpConstant = 43;
	public const int SpvOpConstantComposite = 44;
	public const int SpvOpConstantSampler = 45;
	public const int SpvOpConstantNull = 46;
	public const int SpvOpSpecConstantTrue = 48;
	public const int SpvOpSpecConstantFalse = 49;
	public const int SpvOpSpecConstant = 50;
	public const int SpvOpSpecConstantComposite = 51;
	public const int SpvOpSpecConstantOp = 52;
	public const int SpvOpFunction = 54;
	public const int SpvOpFunctionParameter = 55;
	public const int SpvOpFunctionEnd = 56;
	public const int SpvOpFunctionCall = 57;
	public const int SpvOpVariable = 59;
	public const int SpvOpImageTexelPointer = 60;
	public const int SpvOpLoad = 61;
	public const int SpvOpStore = 62;
	public const int SpvOpCopyMemory = 63;
	public const int SpvOpCopyMemorySized = 64;
	public const int SpvOpAccessChain = 65;
	public const int SpvOpInBoundsAccessChain = 66;
	public const int SpvOpPtrAccessChain = 67;
	public const int SpvOpArrayLength = 68;
	public const int SpvOpGenericPtrMemSemantics = 69;
	public const int SpvOpInBoundsPtrAccessChain = 70;
	public const int SpvOpDecorate = 71;
	public const int SpvOpMemberDecorate = 72;
	public const int SpvOpDecorationGroup = 73;
	public const int SpvOpGroupDecorate = 74;
	public const int SpvOpGroupMemberDecorate = 75;
	public const int SpvOpVectorExtractDynamic = 77;
	public const int SpvOpVectorInsertDynamic = 78;
	public const int SpvOpVectorShuffle = 79;
	public const int SpvOpCompositeConstruct = 80;
	public const int SpvOpCompositeExtract = 81;
	public const int SpvOpCompositeInsert = 82;
	public const int SpvOpCopyObject = 83;
	public const int SpvOpTranspose = 84;
	public const int SpvOpSampledImage = 86;
	public const int SpvOpImageSampleImplicitLod = 87;
	public const int SpvOpImageSampleExplicitLod = 88;
	public const int SpvOpImageSampleDrefImplicitLod = 89;
	public const int SpvOpImageSampleDrefExplicitLod = 90;
	public const int SpvOpImageSampleProjImplicitLod = 91;
	public const int SpvOpImageSampleProjExplicitLod = 92;
	public const int SpvOpImageSampleProjDrefImplicitLod = 93;
	public const int SpvOpImageSampleProjDrefExplicitLod = 94;
	public const int SpvOpImageFetch = 95;
	public const int SpvOpImageGather = 96;
	public const int SpvOpImageDrefGather = 97;
	public const int SpvOpImageRead = 98;
	public const int SpvOpImageWrite = 99;
	public const int SpvOpImage = 100;
	public const int SpvOpImageQueryFormat = 101;
	public const int SpvOpImageQueryOrder = 102;
	public const int SpvOpImageQuerySizeLod = 103;
	public const int SpvOpImageQuerySize = 104;
	public const int SpvOpImageQueryLod = 105;
	public const int SpvOpImageQueryLevels = 106;
	public const int SpvOpImageQuerySamples = 107;
	public const int SpvOpConvertFToU = 109;
	public const int SpvOpConvertFToS = 110;
	public const int SpvOpConvertSToF = 111;
	public const int SpvOpConvertUToF = 112;
	public const int SpvOpUConvert = 113;
	public const int SpvOpSConvert = 114;
	public const int SpvOpFConvert = 115;
	public const int SpvOpQuantizeToF16 = 116;
	public const int SpvOpConvertPtrToU = 117;
	public const int SpvOpSatConvertSToU = 118;
	public const int SpvOpSatConvertUToS = 119;
	public const int SpvOpConvertUToPtr = 120;
	public const int SpvOpPtrCastToGeneric = 121;
	public const int SpvOpGenericCastToPtr = 122;
	public const int SpvOpGenericCastToPtrExplicit = 123;
	public const int SpvOpBitcast = 124;
	public const int SpvOpSNegate = 126;
	public const int SpvOpFNegate = 127;
	public const int SpvOpIAdd = 128;
	public const int SpvOpFAdd = 129;
	public const int SpvOpISub = 130;
	public const int SpvOpFSub = 131;
	public const int SpvOpIMul = 132;
	public const int SpvOpFMul = 133;
	public const int SpvOpUDiv = 134;
	public const int SpvOpSDiv = 135;
	public const int SpvOpFDiv = 136;
	public const int SpvOpUMod = 137;
	public const int SpvOpSRem = 138;
	public const int SpvOpSMod = 139;
	public const int SpvOpFRem = 140;
	public const int SpvOpFMod = 141;
	public const int SpvOpVectorTimesScalar = 142;
	public const int SpvOpMatrixTimesScalar = 143;
	public const int SpvOpVectorTimesMatrix = 144;
	public const int SpvOpMatrixTimesVector = 145;
	public const int SpvOpMatrixTimesMatrix = 146;
	public const int SpvOpOuterProduct = 147;
	public const int SpvOpDot = 148;
	public const int SpvOpIAddCarry = 149;
	public const int SpvOpISubBorrow = 150;
	public const int SpvOpUMulExtended = 151;
	public const int SpvOpSMulExtended = 152;
	public const int SpvOpAny = 154;
	public const int SpvOpAll = 155;
	public const int SpvOpIsNan = 156;
	public const int SpvOpIsInf = 157;
	public const int SpvOpIsFinite = 158;
	public const int SpvOpIsNormal = 159;
	public const int SpvOpSignBitSet = 160;
	public const int SpvOpLessOrGreater = 161;
	public const int SpvOpOrdered = 162;
	public const int SpvOpUnordered = 163;
	public const int SpvOpLogicalEqual = 164;
	public const int SpvOpLogicalNotEqual = 165;
	public const int SpvOpLogicalOr = 166;
	public const int SpvOpLogicalAnd = 167;
	public const int SpvOpLogicalNot = 168;
	public const int SpvOpSelect = 169;
	public const int SpvOpIEqual = 170;
	public const int SpvOpINotEqual = 171;
	public const int SpvOpUGreaterThan = 172;
	public const int SpvOpSGreaterThan = 173;
	public const int SpvOpUGreaterThanEqual = 174;
	public const int SpvOpSGreaterThanEqual = 175;
	public const int SpvOpULessThan = 176;
	public const int SpvOpSLessThan = 177;
	public const int SpvOpULessThanEqual = 178;
	public const int SpvOpSLessThanEqual = 179;
	public const int SpvOpFOrdEqual = 180;
	public const int SpvOpFUnordEqual = 181;
	public const int SpvOpFOrdNotEqual = 182;
	public const int SpvOpFUnordNotEqual = 183;
	public const int SpvOpFOrdLessThan = 184;
	public const int SpvOpFUnordLessThan = 185;
	public const int SpvOpFOrdGreaterThan = 186;
	public const int SpvOpFUnordGreaterThan = 187;
	public const int SpvOpFOrdLessThanEqual = 188;
	public const int SpvOpFUnordLessThanEqual = 189;
	public const int SpvOpFOrdGreaterThanEqual = 190;
	public const int SpvOpFUnordGreaterThanEqual = 191;
	public const int SpvOpShiftRightLogical = 194;
	public const int SpvOpShiftRightArithmetic = 195;
	public const int SpvOpShiftLeftLogical = 196;
	public const int SpvOpBitwiseOr = 197;
	public const int SpvOpBitwiseXor = 198;
	public const int SpvOpBitwiseAnd = 199;
	public const int SpvOpNot = 200;
	public const int SpvOpBitFieldInsert = 201;
	public const int SpvOpBitFieldSExtract = 202;
	public const int SpvOpBitFieldUExtract = 203;
	public const int SpvOpBitReverse = 204;
	public const int SpvOpBitCount = 205;
	public const int SpvOpDPdx = 207;
	public const int SpvOpDPdy = 208;
	public const int SpvOpFwidth = 209;
	public const int SpvOpDPdxFine = 210;
	public const int SpvOpDPdyFine = 211;
	public const int SpvOpFwidthFine = 212;
	public const int SpvOpDPdxCoarse = 213;
	public const int SpvOpDPdyCoarse = 214;
	public const int SpvOpFwidthCoarse = 215;
	public const int SpvOpEmitVertex = 218;
	public const int SpvOpEndPrimitive = 219;
	public const int SpvOpEmitStreamVertex = 220;
	public const int SpvOpEndStreamPrimitive = 221;
	public const int SpvOpControlBarrier = 224;
	public const int SpvOpMemoryBarrier = 225;
	public const int SpvOpAtomicLoad = 227;
	public const int SpvOpAtomicStore = 228;
	public const int SpvOpAtomicExchange = 229;
	public const int SpvOpAtomicCompareExchange = 230;
	public const int SpvOpAtomicCompareExchangeWeak = 231;
	public const int SpvOpAtomicIIncrement = 232;
	public const int SpvOpAtomicIDecrement = 233;
	public const int SpvOpAtomicIAdd = 234;
	public const int SpvOpAtomicISub = 235;
	public const int SpvOpAtomicSMin = 236;
	public const int SpvOpAtomicUMin = 237;
	public const int SpvOpAtomicSMax = 238;
	public const int SpvOpAtomicUMax = 239;
	public const int SpvOpAtomicAnd = 240;
	public const int SpvOpAtomicOr = 241;
	public const int SpvOpAtomicXor = 242;
	public const int SpvOpPhi = 245;
	public const int SpvOpLoopMerge = 246;
	public const int SpvOpSelectionMerge = 247;
	public const int SpvOpLabel = 248;
	public const int SpvOpBranch = 249;
	public const int SpvOpBranchConditional = 250;
	public const int SpvOpSwitch = 251;
	public const int SpvOpKill = 252;
	public const int SpvOpReturn = 253;
	public const int SpvOpReturnValue = 254;
	public const int SpvOpUnreachable = 255;
	public const int SpvOpLifetimeStart = 256;
	public const int SpvOpLifetimeStop = 257;
	public const int SpvOpGroupAsyncCopy = 259;
	public const int SpvOpGroupWaitEvents = 260;
	public const int SpvOpGroupAll = 261;
	public const int SpvOpGroupAny = 262;
	public const int SpvOpGroupBroadcast = 263;
	public const int SpvOpGroupIAdd = 264;
	public const int SpvOpGroupFAdd = 265;
	public const int SpvOpGroupFMin = 266;
	public const int SpvOpGroupUMin = 267;
	public const int SpvOpGroupSMin = 268;
	public const int SpvOpGroupFMax = 269;
	public const int SpvOpGroupUMax = 270;
	public const int SpvOpGroupSMax = 271;
	public const int SpvOpReadPipe = 274;
	public const int SpvOpWritePipe = 275;
	public const int SpvOpReservedReadPipe = 276;
	public const int SpvOpReservedWritePipe = 277;
	public const int SpvOpReserveReadPipePackets = 278;
	public const int SpvOpReserveWritePipePackets = 279;
	public const int SpvOpCommitReadPipe = 280;
	public const int SpvOpCommitWritePipe = 281;
	public const int SpvOpIsValidReserveId = 282;
	public const int SpvOpGetNumPipePackets = 283;
	public const int SpvOpGetMaxPipePackets = 284;
	public const int SpvOpGroupReserveReadPipePackets = 285;
	public const int SpvOpGroupReserveWritePipePackets = 286;
	public const int SpvOpGroupCommitReadPipe = 287;
	public const int SpvOpGroupCommitWritePipe = 288;
	public const int SpvOpEnqueueMarker = 291;
	public const int SpvOpEnqueueKernel = 292;
	public const int SpvOpGetKernelNDrangeSubGroupCount = 293;
	public const int SpvOpGetKernelNDrangeMaxSubGroupSize = 294;
	public const int SpvOpGetKernelWorkGroupSize = 295;
	public const int SpvOpGetKernelPreferredWorkGroupSizeMultiple = 296;
	public const int SpvOpRetainEvent = 297;
	public const int SpvOpReleaseEvent = 298;
	public const int SpvOpCreateUserEvent = 299;
	public const int SpvOpIsValidEvent = 300;
	public const int SpvOpSetUserEventStatus = 301;
	public const int SpvOpCaptureEventProfilingInfo = 302;
	public const int SpvOpGetDefaultQueue = 303;
	public const int SpvOpBuildNDRange = 304;
	public const int SpvOpImageSparseSampleImplicitLod = 305;
	public const int SpvOpImageSparseSampleExplicitLod = 306;
	public const int SpvOpImageSparseSampleDrefImplicitLod = 307;
	public const int SpvOpImageSparseSampleDrefExplicitLod = 308;
	public const int SpvOpImageSparseSampleProjImplicitLod = 309;
	public const int SpvOpImageSparseSampleProjExplicitLod = 310;
	public const int SpvOpImageSparseSampleProjDrefImplicitLod = 311;
	public const int SpvOpImageSparseSampleProjDrefExplicitLod = 312;
	public const int SpvOpImageSparseFetch = 313;
	public const int SpvOpImageSparseGather = 314;
	public const int SpvOpImageSparseDrefGather = 315;
	public const int SpvOpImageSparseTexelsResident = 316;
	public const int SpvOpNoLine = 317;
	public const int SpvOpAtomicFlagTestAndSet = 318;
	public const int SpvOpAtomicFlagClear = 319;
	public const int SpvOpImageSparseRead = 320;
	public const int SpvOpSizeOf = 321;
	public const int SpvOpTypePipeStorage = 322;
	public const int SpvOpConstantPipeStorage = 323;
	public const int SpvOpCreatePipeFromPipeStorage = 324;
	public const int SpvOpGetKernelLocalSizeForSubgroupCount = 325;
	public const int SpvOpGetKernelMaxNumSubgroups = 326;
	public const int SpvOpTypeNamedBarrier = 327;
	public const int SpvOpNamedBarrierInitialize = 328;
	public const int SpvOpMemoryNamedBarrier = 329;
	public const int SpvOpModuleProcessed = 330;
	public const int SpvOpExecutionModeId = 331;
	public const int SpvOpDecorateId = 332;
	public const int SpvOpGroupNonUniformElect = 333;
	public const int SpvOpGroupNonUniformAll = 334;
	public const int SpvOpGroupNonUniformAny = 335;
	public const int SpvOpGroupNonUniformAllEqual = 336;
	public const int SpvOpGroupNonUniformBroadcast = 337;
	public const int SpvOpGroupNonUniformBroadcastFirst = 338;
	public const int SpvOpGroupNonUniformBallot = 339;
	public const int SpvOpGroupNonUniformInverseBallot = 340;
	public const int SpvOpGroupNonUniformBallotBitExtract = 341;
	public const int SpvOpGroupNonUniformBallotBitCount = 342;
	public const int SpvOpGroupNonUniformBallotFindLSB = 343;
	public const int SpvOpGroupNonUniformBallotFindMSB = 344;
	public const int SpvOpGroupNonUniformShuffle = 345;
	public const int SpvOpGroupNonUniformShuffleXor = 346;
	public const int SpvOpGroupNonUniformShuffleUp = 347;
	public const int SpvOpGroupNonUniformShuffleDown = 348;
	public const int SpvOpGroupNonUniformIAdd = 349;
	public const int SpvOpGroupNonUniformFAdd = 350;
	public const int SpvOpGroupNonUniformIMul = 351;
	public const int SpvOpGroupNonUniformFMul = 352;
	public const int SpvOpGroupNonUniformSMin = 353;
	public const int SpvOpGroupNonUniformUMin = 354;
	public const int SpvOpGroupNonUniformFMin = 355;
	public const int SpvOpGroupNonUniformSMax = 356;
	public const int SpvOpGroupNonUniformUMax = 357;
	public const int SpvOpGroupNonUniformFMax = 358;
	public const int SpvOpGroupNonUniformBitwiseAnd = 359;
	public const int SpvOpGroupNonUniformBitwiseOr = 360;
	public const int SpvOpGroupNonUniformBitwiseXor = 361;
	public const int SpvOpGroupNonUniformLogicalAnd = 362;
	public const int SpvOpGroupNonUniformLogicalOr = 363;
	public const int SpvOpGroupNonUniformLogicalXor = 364;
	public const int SpvOpGroupNonUniformQuadBroadcast = 365;
	public const int SpvOpGroupNonUniformQuadSwap = 366;
	public const int SpvOpCopyLogical = 400;
	public const int SpvOpPtrEqual = 401;
	public const int SpvOpPtrNotEqual = 402;
	public const int SpvOpPtrDiff = 403;
	public const int SpvOpTerminateInvocation = 4416;
	public const int SpvOpSubgroupBallotKHR = 4421;
	public const int SpvOpSubgroupFirstInvocationKHR = 4422;
	public const int SpvOpSubgroupAllKHR = 4428;
	public const int SpvOpSubgroupAnyKHR = 4429;
	public const int SpvOpSubgroupAllEqualKHR = 4430;
	public const int SpvOpSubgroupReadInvocationKHR = 4432;
	public const int SpvOpTraceRayKHR = 4445;
	public const int SpvOpExecuteCallableKHR = 4446;
	public const int SpvOpConvertUToAccelerationStructureKHR = 4447;
	public const int SpvOpIgnoreIntersectionKHR = 4448;
	public const int SpvOpTerminateRayKHR = 4449;
	public const int SpvOpSDot = 4450;
	public const int SpvOpSDotKHR = 4450;
	public const int SpvOpUDot = 4451;
	public const int SpvOpUDotKHR = 4451;
	public const int SpvOpSUDot = 4452;
	public const int SpvOpSUDotKHR = 4452;
	public const int SpvOpSDotAccSat = 4453;
	public const int SpvOpSDotAccSatKHR = 4453;
	public const int SpvOpUDotAccSat = 4454;
	public const int SpvOpUDotAccSatKHR = 4454;
	public const int SpvOpSUDotAccSat = 4455;
	public const int SpvOpSUDotAccSatKHR = 4455;
	public const int SpvOpTypeRayQueryKHR = 4472;
	public const int SpvOpRayQueryInitializeKHR = 4473;
	public const int SpvOpRayQueryTerminateKHR = 4474;
	public const int SpvOpRayQueryGenerateIntersectionKHR = 4475;
	public const int SpvOpRayQueryConfirmIntersectionKHR = 4476;
	public const int SpvOpRayQueryProceedKHR = 4477;
	public const int SpvOpRayQueryGetIntersectionTypeKHR = 4479;
	public const int SpvOpGroupIAddNonUniformAMD = 5000;
	public const int SpvOpGroupFAddNonUniformAMD = 5001;
	public const int SpvOpGroupFMinNonUniformAMD = 5002;
	public const int SpvOpGroupUMinNonUniformAMD = 5003;
	public const int SpvOpGroupSMinNonUniformAMD = 5004;
	public const int SpvOpGroupFMaxNonUniformAMD = 5005;
	public const int SpvOpGroupUMaxNonUniformAMD = 5006;
	public const int SpvOpGroupSMaxNonUniformAMD = 5007;
	public const int SpvOpFragmentMaskFetchAMD = 5011;
	public const int SpvOpFragmentFetchAMD = 5012;
	public const int SpvOpReadClockKHR = 5056;
	public const int SpvOpImageSampleFootprintNV = 5283;
	public const int SpvOpGroupNonUniformPartitionNV = 5296;
	public const int SpvOpWritePackedPrimitiveIndices4x8NV = 5299;
	public const int SpvOpReportIntersectionKHR = 5334;
	public const int SpvOpReportIntersectionNV = 5334;
	public const int SpvOpIgnoreIntersectionNV = 5335;
	public const int SpvOpTerminateRayNV = 5336;
	public const int SpvOpTraceNV = 5337;
	public const int SpvOpTraceMotionNV = 5338;
	public const int SpvOpTraceRayMotionNV = 5339;
	public const int SpvOpTypeAccelerationStructureKHR = 5341;
	public const int SpvOpTypeAccelerationStructureNV = 5341;
	public const int SpvOpExecuteCallableNV = 5344;
	public const int SpvOpTypeCooperativeMatrixNV = 5358;
	public const int SpvOpCooperativeMatrixLoadNV = 5359;
	public const int SpvOpCooperativeMatrixStoreNV = 5360;
	public const int SpvOpCooperativeMatrixMulAddNV = 5361;
	public const int SpvOpCooperativeMatrixLengthNV = 5362;
	public const int SpvOpBeginInvocationInterlockEXT = 5364;
	public const int SpvOpEndInvocationInterlockEXT = 5365;
	public const int SpvOpDemoteToHelperInvocation = 5380;
	public const int SpvOpDemoteToHelperInvocationEXT = 5380;
	public const int SpvOpIsHelperInvocationEXT = 5381;
	public const int SpvOpConvertUToImageNV = 5391;
	public const int SpvOpConvertUToSamplerNV = 5392;
	public const int SpvOpConvertImageToUNV = 5393;
	public const int SpvOpConvertSamplerToUNV = 5394;
	public const int SpvOpConvertUToSampledImageNV = 5395;
	public const int SpvOpConvertSampledImageToUNV = 5396;
	public const int SpvOpSamplerImageAddressingModeNV = 5397;
	public const int SpvOpSubgroupShuffleINTEL = 5571;
	public const int SpvOpSubgroupShuffleDownINTEL = 5572;
	public const int SpvOpSubgroupShuffleUpINTEL = 5573;
	public const int SpvOpSubgroupShuffleXorINTEL = 5574;
	public const int SpvOpSubgroupBlockReadINTEL = 5575;
	public const int SpvOpSubgroupBlockWriteINTEL = 5576;
	public const int SpvOpSubgroupImageBlockReadINTEL = 5577;
	public const int SpvOpSubgroupImageBlockWriteINTEL = 5578;
	public const int SpvOpSubgroupImageMediaBlockReadINTEL = 5580;
	public const int SpvOpSubgroupImageMediaBlockWriteINTEL = 5581;
	public const int SpvOpUCountLeadingZerosINTEL = 5585;
	public const int SpvOpUCountTrailingZerosINTEL = 5586;
	public const int SpvOpAbsISubINTEL = 5587;
	public const int SpvOpAbsUSubINTEL = 5588;
	public const int SpvOpIAddSatINTEL = 5589;
	public const int SpvOpUAddSatINTEL = 5590;
	public const int SpvOpIAverageINTEL = 5591;
	public const int SpvOpUAverageINTEL = 5592;
	public const int SpvOpIAverageRoundedINTEL = 5593;
	public const int SpvOpUAverageRoundedINTEL = 5594;
	public const int SpvOpISubSatINTEL = 5595;
	public const int SpvOpUSubSatINTEL = 5596;
	public const int SpvOpIMul32x16INTEL = 5597;
	public const int SpvOpUMul32x16INTEL = 5598;
	public const int SpvOpConstantFunctionPointerINTEL = 5600;
	public const int SpvOpFunctionPointerCallINTEL = 5601;
	public const int SpvOpAsmTargetINTEL = 5609;
	public const int SpvOpAsmINTEL = 5610;
	public const int SpvOpAsmCallINTEL = 5611;
	public const int SpvOpAtomicFMinEXT = 5614;
	public const int SpvOpAtomicFMaxEXT = 5615;
	public const int SpvOpAssumeTrueKHR = 5630;
	public const int SpvOpExpectKHR = 5631;
	public const int SpvOpDecorateString = 5632;
	public const int SpvOpDecorateStringGOOGLE = 5632;
	public const int SpvOpMemberDecorateString = 5633;
	public const int SpvOpMemberDecorateStringGOOGLE = 5633;
	public const int SpvOpVmeImageINTEL = 5699;
	public const int SpvOpTypeVmeImageINTEL = 5700;
	public const int SpvOpTypeAvcImePayloadINTEL = 5701;
	public const int SpvOpTypeAvcRefPayloadINTEL = 5702;
	public const int SpvOpTypeAvcSicPayloadINTEL = 5703;
	public const int SpvOpTypeAvcMcePayloadINTEL = 5704;
	public const int SpvOpTypeAvcMceResultINTEL = 5705;
	public const int SpvOpTypeAvcImeResultINTEL = 5706;
	public const int SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL = 5707;
	public const int SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL = 5708;
	public const int SpvOpTypeAvcImeSingleReferenceStreaminINTEL = 5709;
	public const int SpvOpTypeAvcImeDualReferenceStreaminINTEL = 5710;
	public const int SpvOpTypeAvcRefResultINTEL = 5711;
	public const int SpvOpTypeAvcSicResultINTEL = 5712;
	public const int SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = 5713;
	public const int SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = 5714;
	public const int SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL = 5715;
	public const int SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL = 5716;
	public const int SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = 5717;
	public const int SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL = 5718;
	public const int SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = 5719;
	public const int SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = 5720;
	public const int SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = 5721;
	public const int SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = 5722;
	public const int SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = 5723;
	public const int SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL = 5724;
	public const int SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = 5725;
	public const int SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = 5726;
	public const int SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = 5727;
	public const int SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL = 5728;
	public const int SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = 5729;
	public const int SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = 5730;
	public const int SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = 5731;
	public const int SpvOpSubgroupAvcMceConvertToImePayloadINTEL = 5732;
	public const int SpvOpSubgroupAvcMceConvertToImeResultINTEL = 5733;
	public const int SpvOpSubgroupAvcMceConvertToRefPayloadINTEL = 5734;
	public const int SpvOpSubgroupAvcMceConvertToRefResultINTEL = 5735;
	public const int SpvOpSubgroupAvcMceConvertToSicPayloadINTEL = 5736;
	public const int SpvOpSubgroupAvcMceConvertToSicResultINTEL = 5737;
	public const int SpvOpSubgroupAvcMceGetMotionVectorsINTEL = 5738;
	public const int SpvOpSubgroupAvcMceGetInterDistortionsINTEL = 5739;
	public const int SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL = 5740;
	public const int SpvOpSubgroupAvcMceGetInterMajorShapeINTEL = 5741;
	public const int SpvOpSubgroupAvcMceGetInterMinorShapeINTEL = 5742;
	public const int SpvOpSubgroupAvcMceGetInterDirectionsINTEL = 5743;
	public const int SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL = 5744;
	public const int SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL = 5745;
	public const int SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = 5746;
	public const int SpvOpSubgroupAvcImeInitializeINTEL = 5747;
	public const int SpvOpSubgroupAvcImeSetSingleReferenceINTEL = 5748;
	public const int SpvOpSubgroupAvcImeSetDualReferenceINTEL = 5749;
	public const int SpvOpSubgroupAvcImeRefWindowSizeINTEL = 5750;
	public const int SpvOpSubgroupAvcImeAdjustRefOffsetINTEL = 5751;
	public const int SpvOpSubgroupAvcImeConvertToMcePayloadINTEL = 5752;
	public const int SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL = 5753;
	public const int SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL = 5754;
	public const int SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = 5755;
	public const int SpvOpSubgroupAvcImeSetWeightedSadINTEL = 5756;
	public const int SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL = 5757;
	public const int SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL = 5758;
	public const int SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = 5759;
	public const int SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = 5760;
	public const int SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = 5761;
	public const int SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = 5762;
	public const int SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = 5763;
	public const int SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = 5764;
	public const int SpvOpSubgroupAvcImeConvertToMceResultINTEL = 5765;
	public const int SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL = 5766;
	public const int SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL = 5767;
	public const int SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL = 5768;
	public const int SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL = 5769;
	public const int SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = 5770;
	public const int SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = 5771;
	public const int SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = 5772;
	public const int SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = 5773;
	public const int SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = 5774;
	public const int SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = 5775;
	public const int SpvOpSubgroupAvcImeGetBorderReachedINTEL = 5776;
	public const int SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL = 5777;
	public const int SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = 5778;
	public const int SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = 5779;
	public const int SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = 5780;
	public const int SpvOpSubgroupAvcFmeInitializeINTEL = 5781;
	public const int SpvOpSubgroupAvcBmeInitializeINTEL = 5782;
	public const int SpvOpSubgroupAvcRefConvertToMcePayloadINTEL = 5783;
	public const int SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL = 5784;
	public const int SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL = 5785;
	public const int SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL = 5786;
	public const int SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL = 5787;
	public const int SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL = 5788;
	public const int SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = 5789;
	public const int SpvOpSubgroupAvcRefConvertToMceResultINTEL = 5790;
	public const int SpvOpSubgroupAvcSicInitializeINTEL = 5791;
	public const int SpvOpSubgroupAvcSicConfigureSkcINTEL = 5792;
	public const int SpvOpSubgroupAvcSicConfigureIpeLumaINTEL = 5793;
	public const int SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL = 5794;
	public const int SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL = 5795;
	public const int SpvOpSubgroupAvcSicConvertToMcePayloadINTEL = 5796;
	public const int SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL = 5797;
	public const int SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = 5798;
	public const int SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = 5799;
	public const int SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL = 5800;
	public const int SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL = 5801;
	public const int SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL = 5802;
	public const int SpvOpSubgroupAvcSicEvaluateIpeINTEL = 5803;
	public const int SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL = 5804;
	public const int SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL = 5805;
	public const int SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL = 5806;
	public const int SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = 5807;
	public const int SpvOpSubgroupAvcSicConvertToMceResultINTEL = 5808;
	public const int SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL = 5809;
	public const int SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL = 5810;
	public const int SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL = 5811;
	public const int SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL = 5812;
	public const int SpvOpSubgroupAvcSicGetIpeChromaModeINTEL = 5813;
	public const int SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = 5814;
	public const int SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = 5815;
	public const int SpvOpSubgroupAvcSicGetInterRawSadsINTEL = 5816;
	public const int SpvOpVariableLengthArrayINTEL = 5818;
	public const int SpvOpSaveMemoryINTEL = 5819;
	public const int SpvOpRestoreMemoryINTEL = 5820;
	public const int SpvOpArbitraryFloatSinCosPiINTEL = 5840;
	public const int SpvOpArbitraryFloatCastINTEL = 5841;
	public const int SpvOpArbitraryFloatCastFromIntINTEL = 5842;
	public const int SpvOpArbitraryFloatCastToIntINTEL = 5843;
	public const int SpvOpArbitraryFloatAddINTEL = 5846;
	public const int SpvOpArbitraryFloatSubINTEL = 5847;
	public const int SpvOpArbitraryFloatMulINTEL = 5848;
	public const int SpvOpArbitraryFloatDivINTEL = 5849;
	public const int SpvOpArbitraryFloatGTINTEL = 5850;
	public const int SpvOpArbitraryFloatGEINTEL = 5851;
	public const int SpvOpArbitraryFloatLTINTEL = 5852;
	public const int SpvOpArbitraryFloatLEINTEL = 5853;
	public const int SpvOpArbitraryFloatEQINTEL = 5854;
	public const int SpvOpArbitraryFloatRecipINTEL = 5855;
	public const int SpvOpArbitraryFloatRSqrtINTEL = 5856;
	public const int SpvOpArbitraryFloatCbrtINTEL = 5857;
	public const int SpvOpArbitraryFloatHypotINTEL = 5858;
	public const int SpvOpArbitraryFloatSqrtINTEL = 5859;
	public const int SpvOpArbitraryFloatLogINTEL = 5860;
	public const int SpvOpArbitraryFloatLog2INTEL = 5861;
	public const int SpvOpArbitraryFloatLog10INTEL = 5862;
	public const int SpvOpArbitraryFloatLog1pINTEL = 5863;
	public const int SpvOpArbitraryFloatExpINTEL = 5864;
	public const int SpvOpArbitraryFloatExp2INTEL = 5865;
	public const int SpvOpArbitraryFloatExp10INTEL = 5866;
	public const int SpvOpArbitraryFloatExpm1INTEL = 5867;
	public const int SpvOpArbitraryFloatSinINTEL = 5868;
	public const int SpvOpArbitraryFloatCosINTEL = 5869;
	public const int SpvOpArbitraryFloatSinCosINTEL = 5870;
	public const int SpvOpArbitraryFloatSinPiINTEL = 5871;
	public const int SpvOpArbitraryFloatCosPiINTEL = 5872;
	public const int SpvOpArbitraryFloatASinINTEL = 5873;
	public const int SpvOpArbitraryFloatASinPiINTEL = 5874;
	public const int SpvOpArbitraryFloatACosINTEL = 5875;
	public const int SpvOpArbitraryFloatACosPiINTEL = 5876;
	public const int SpvOpArbitraryFloatATanINTEL = 5877;
	public const int SpvOpArbitraryFloatATanPiINTEL = 5878;
	public const int SpvOpArbitraryFloatATan2INTEL = 5879;
	public const int SpvOpArbitraryFloatPowINTEL = 5880;
	public const int SpvOpArbitraryFloatPowRINTEL = 5881;
	public const int SpvOpArbitraryFloatPowNINTEL = 5882;
	public const int SpvOpLoopControlINTEL = 5887;
	public const int SpvOpFixedSqrtINTEL = 5923;
	public const int SpvOpFixedRecipINTEL = 5924;
	public const int SpvOpFixedRsqrtINTEL = 5925;
	public const int SpvOpFixedSinINTEL = 5926;
	public const int SpvOpFixedCosINTEL = 5927;
	public const int SpvOpFixedSinCosINTEL = 5928;
	public const int SpvOpFixedSinPiINTEL = 5929;
	public const int SpvOpFixedCosPiINTEL = 5930;
	public const int SpvOpFixedSinCosPiINTEL = 5931;
	public const int SpvOpFixedLogINTEL = 5932;
	public const int SpvOpFixedExpINTEL = 5933;
	public const int SpvOpPtrCastToCrossWorkgroupINTEL = 5934;
	public const int SpvOpCrossWorkgroupCastToPtrINTEL = 5938;
	public const int SpvOpReadPipeBlockingINTEL = 5946;
	public const int SpvOpWritePipeBlockingINTEL = 5947;
	public const int SpvOpFPGARegINTEL = 5949;
	public const int SpvOpRayQueryGetRayTMinKHR = 6016;
	public const int SpvOpRayQueryGetRayFlagsKHR = 6017;
	public const int SpvOpRayQueryGetIntersectionTKHR = 6018;
	public const int SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR = 6019;
	public const int SpvOpRayQueryGetIntersectionInstanceIdKHR = 6020;
	public const int SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR = 6021;
	public const int SpvOpRayQueryGetIntersectionGeometryIndexKHR = 6022;
	public const int SpvOpRayQueryGetIntersectionPrimitiveIndexKHR = 6023;
	public const int SpvOpRayQueryGetIntersectionBarycentricsKHR = 6024;
	public const int SpvOpRayQueryGetIntersectionFrontFaceKHR = 6025;
	public const int SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR = 6026;
	public const int SpvOpRayQueryGetIntersectionObjectRayDirectionKHR = 6027;
	public const int SpvOpRayQueryGetIntersectionObjectRayOriginKHR = 6028;
	public const int SpvOpRayQueryGetWorldRayDirectionKHR = 6029;
	public const int SpvOpRayQueryGetWorldRayOriginKHR = 6030;
	public const int SpvOpRayQueryGetIntersectionObjectToWorldKHR = 6031;
	public const int SpvOpRayQueryGetIntersectionWorldToObjectKHR = 6032;
	public const int SpvOpAtomicFAddEXT = 6035;
	public const int SpvOpTypeBufferSurfaceINTEL = 6086;
	public const int SpvOpTypeStructContinuedINTEL = 6090;
	public const int SpvOpConstantCompositeContinuedINTEL = 6091;
	public const int SpvOpSpecConstantCompositeContinuedINTEL = 6092;
	public const int SpvOpMax = 2147483647;

	// Pseudo enum 'SpvReflectModuleFlagBits' @ spirv_reflect.h:91:14
	public const int SPV_REFLECT_MODULE_FLAG_NONE = 0;
	public const int SPV_REFLECT_MODULE_FLAG_NO_COPY = 1;

	// Pseudo enum 'SpvReflectTypeFlagBits' @ spirv_reflect.h:101:14
	public const int SPV_REFLECT_TYPE_FLAG_UNDEFINED = 0;
	public const int SPV_REFLECT_TYPE_FLAG_VOID = 1;
	public const int SPV_REFLECT_TYPE_FLAG_BOOL = 2;
	public const int SPV_REFLECT_TYPE_FLAG_INT = 4;
	public const int SPV_REFLECT_TYPE_FLAG_FLOAT = 8;
	public const int SPV_REFLECT_TYPE_FLAG_VECTOR = 256;
	public const int SPV_REFLECT_TYPE_FLAG_MATRIX = 512;
	public const int SPV_REFLECT_TYPE_FLAG_EXTERNAL_IMAGE = 65536;
	public const int SPV_REFLECT_TYPE_FLAG_EXTERNAL_SAMPLER = 131072;
	public const int SPV_REFLECT_TYPE_FLAG_EXTERNAL_SAMPLED_IMAGE = 262144;
	public const int SPV_REFLECT_TYPE_FLAG_EXTERNAL_BLOCK = 524288;
	public const int SPV_REFLECT_TYPE_FLAG_EXTERNAL_ACCELERATION_STRUCTURE = 1048576;
	public const int SPV_REFLECT_TYPE_FLAG_EXTERNAL_MASK = 16711680;
	public const int SPV_REFLECT_TYPE_FLAG_STRUCT = 268435456;
	public const int SPV_REFLECT_TYPE_FLAG_ARRAY = 536870912;

	// Pseudo enum 'SpvReflectDecorationFlagBits' @ spirv_reflect.h:131:14
	public const int SPV_REFLECT_DECORATION_NONE = 0;
	public const int SPV_REFLECT_DECORATION_BLOCK = 1;
	public const int SPV_REFLECT_DECORATION_BUFFER_BLOCK = 2;
	public const int SPV_REFLECT_DECORATION_ROW_MAJOR = 4;
	public const int SPV_REFLECT_DECORATION_COLUMN_MAJOR = 8;
	public const int SPV_REFLECT_DECORATION_BUILT_IN = 16;
	public const int SPV_REFLECT_DECORATION_NOPERSPECTIVE = 32;
	public const int SPV_REFLECT_DECORATION_FLAT = 64;
	public const int SPV_REFLECT_DECORATION_NON_WRITABLE = 128;
	public const int SPV_REFLECT_DECORATION_RELAXED_PRECISION = 256;

	// Pseudo enum 'SpvReflectVariableFlagBits' @ spirv_reflect.h:191:6
	public const int SPV_REFLECT_VARIABLE_FLAGS_NONE = 0;
	public const int SPV_REFLECT_VARIABLE_FLAGS_UNUSED = 1;

	// MacroDefinition @ spirv.h:56:9 (include\spirv\unified1\spirv.h)
	public const int SPV_VERSION = 0x10600;

	// MacroDefinition @ spirv.h:57:9 (include\spirv\unified1\spirv.h)
	public const int SPV_REVISION = 1;

	#region C2CS.Runtime

	public static class Runtime
	{
		/// <summary>
		///     A boolean value type with the same memory layout as a <see cref="byte" /> in both managed and unmanaged contexts;
		///     equivalent to a standard bool found in C/C++/ObjC where <c>0</c> is <c>false</c> and any other value is
		///     <c>true</c>.
		/// </summary>
		[StructLayout(LayoutKind.Sequential)]
		public readonly struct CBool : IEquatable<CBool>
		{
			private readonly byte _value;

			private CBool(bool value)
			{
				_value = Convert.ToByte(value);
			}

			/// <summary>
			///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
			/// </summary>
			/// <param name="value">The value.</param>
			/// <returns>A <see cref="CBool" />.</returns>
			public static implicit operator CBool(bool value)
			{
				return FromBoolean(value);
			}

			/// <summary>
			///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
			/// </summary>
			/// <param name="value">The value.</param>
			/// <returns>A <see cref="CBool" />.</returns>
			public static CBool FromBoolean(bool value)
			{
				return new CBool(value);
			}

			/// <summary>
			///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
			/// </summary>
			/// <param name="value">The value.</param>
			/// <returns>A <see cref="bool" />.</returns>
			public static implicit operator bool(CBool value)
			{
				return ToBoolean(value);
			}

			/// <summary>
			///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
			/// </summary>
			/// <param name="value">The value.</param>
			/// <returns>A <see cref="bool" />.</returns>
			public static bool ToBoolean(CBool value)
			{
				return Convert.ToBoolean(value._value);
			}

			/// <inheritdoc />
			public override string ToString()
			{
				return ToBoolean(this).ToString();
			}

			/// <inheritdoc />
			public override bool Equals(object? obj)
			{
				return obj is CBool b && Equals(b);
			}

			/// <inheritdoc />
			public bool Equals(CBool other)
			{
				return _value == other._value;
			}

			/// <inheritdoc />
			public override int GetHashCode()
			{
				return _value.GetHashCode();
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
			/// </summary>
			/// <param name="left">The first <see cref="CBool" /> to compare.</param>
			/// <param name="right">The second <see cref="CBool" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
			public static bool operator ==(CBool left, CBool right)
			{
				return left._value == right._value;
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
			/// </summary>
			/// <param name="left">The first <see cref="CBool" /> to compare.</param>
			/// <param name="right">The second <see cref="CBool" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
			public static bool operator !=(CBool left, CBool right)
			{
				return !(left == right);
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
			/// </summary>
			/// <param name="left">The first <see cref="CBool" /> to compare.</param>
			/// <param name="right">The second <see cref="CBool" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
			public static bool Equals(CBool left, CBool right)
			{
				return left._value == right._value;
			}
		}

		/// <summary>
		///     A value type with the same memory layout as a <see cref="byte" /> in a managed context and <c>char</c> in
		///     an unmanaged context.
		/// </summary>
		[StructLayout(LayoutKind.Sequential)]
		public readonly struct CChar : IEquatable<byte>, IEquatable<CChar>
		{
			private readonly byte _value;

			private CChar(byte value)
			{
				_value = Convert.ToByte(value);
			}

			/// <summary>
			///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
			/// </summary>
			/// <param name="value">The value.</param>
			/// <returns>A <see cref="CChar" />.</returns>
			public static implicit operator CChar(byte value)
			{
				return FromByte(value);
			}

			/// <summary>
			///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
			/// </summary>
			/// <param name="value">The value.</param>
			/// <returns>A <see cref="CChar" />.</returns>
			public static CChar FromByte(byte value)
			{
				return new CChar(value);
			}

			/// <summary>
			///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
			/// </summary>
			/// <param name="value">The value.</param>
			/// <returns>A <see cref="byte" />.</returns>
			public static implicit operator byte(CChar value)
			{
				return ToByte(value);
			}

			/// <summary>
			///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
			/// </summary>
			/// <param name="value">The value.</param>
			/// <returns>A <see cref="byte" />.</returns>
			public static byte ToByte(CChar value)
			{
				return value._value;
			}

			/// <inheritdoc />
			public override string ToString()
			{
				return _value.ToString(CultureInfo.InvariantCulture);
			}

			/// <inheritdoc />
			public override bool Equals(object? obj)
			{
				return obj is CChar value && Equals(value);
			}

			/// <inheritdoc />
			public bool Equals(byte other)
			{
				return _value == other;
			}

			/// <inheritdoc />
			public bool Equals(CChar other)
			{
				return _value == other._value;
			}

			/// <inheritdoc />
			public override int GetHashCode()
			{
				return _value.GetHashCode();
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
			/// </summary>
			/// <param name="left">The first <see cref="CChar" /> to compare.</param>
			/// <param name="right">The second <see cref="CChar" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
			public static bool operator ==(CChar left, CChar right)
			{
				return left._value == right._value;
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are not equal.
			/// </summary>
			/// <param name="left">The first <see cref="CChar" /> to compare.</param>
			/// <param name="right">The second <see cref="CChar" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
			public static bool operator !=(CChar left, CChar right)
			{
				return !(left == right);
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
			/// </summary>
			/// <param name="left">The first <see cref="CChar" /> to compare.</param>
			/// <param name="right">The second <see cref="CChar" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
			public static bool Equals(CChar left, CChar right)
			{
				return left._value == right._value;
			}
		}

		/// <summary>
		///     A value type with the memory layout of a <c>wchar_t</c> in an unmanaged context. The memory layout in a
		///     managed context depends on the operating system or otherwise on preprocessor directives defines.
		/// </summary>
		[StructLayout(LayoutKind.Sequential)]
		public readonly struct CCharWide : IEquatable<CCharWide>
		{
#if SIZEOF_WCHAR_T_1
    private readonly byte _value;
#elif SIZEOF_WCHAR_T_2
    private readonly ushort _value;
#elif SIZEOF_WCHAR_T_4
    private readonly uint _value;
#else
			private readonly ushort _value;
#endif

			private CCharWide(byte value)
			{
#if SIZEOF_WCHAR_T_1
        _value = Convert.ToByte(value);
#elif SIZEOF_WCHAR_T_2
        _value = Convert.ToUInt16(value);
#elif SIZEOF_WCHAR_T_4
        _value = Convert.ToUInt32(value);
#else
				_value = Convert.ToUInt16(value);
#endif
			}

			/// <inheritdoc />
			public override string ToString()
			{
				return _value.ToString(CultureInfo.InvariantCulture);
			}

			/// <inheritdoc />
			public override bool Equals(object? obj)
			{
				return obj is CCharWide value && Equals(value);
			}

			/// <inheritdoc />
			public bool Equals(CCharWide other)
			{
				return _value == other._value;
			}

			/// <inheritdoc />
			public override int GetHashCode()
			{
				return _value.GetHashCode();
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CCharWide" /> structures are equal.
			/// </summary>
			/// <param name="left">The first <see cref="CCharWide" /> to compare.</param>
			/// <param name="right">The second <see cref="CCharWide" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
			public static bool operator ==(CCharWide left, CCharWide right)
			{
				return left._value == right._value;
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CCharWide" /> structures are not equal.
			/// </summary>
			/// <param name="left">The first <see cref="CCharWide" /> to compare.</param>
			/// <param name="right">The second <see cref="CCharWide" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
			public static bool operator !=(CCharWide left, CCharWide right)
			{
				return !(left == right);
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CCharWide" /> structures are equal.
			/// </summary>
			/// <param name="left">The first <see cref="CCharWide" /> to compare.</param>
			/// <param name="right">The second <see cref="CCharWide" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
			public static bool Equals(CCharWide left, CCharWide right)
			{
				return left._value == right._value;
			}
		}

		/// <summary>
		///     A pointer value type of bytes that represent a string; the C type `char*`.
		/// </summary>
		[StructLayout(LayoutKind.Sequential)]
		public readonly unsafe struct CString : IEquatable<CString>
		{
			internal readonly IntPtr _pointer;

			/// <summary>
			///     Gets a value indicating whether this <see cref="CString" /> is a null pointer.
			/// </summary>
			public bool IsNull => _pointer == IntPtr.Zero;

			/// <summary>
			///     Initializes a new instance of the <see cref="CString" /> struct.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			public CString(byte* value)
			{
				_pointer = (nint) value;
			}

			/// <summary>
			///     Initializes a new instance of the <see cref="CString" /> struct.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			public CString(IntPtr value)
			{
				_pointer = value;
			}

			/// <summary>
			///     Initializes a new instance of the <see cref="CString" /> struct.
			/// </summary>
			/// <param name="s">The string value.</param>
			public CString(string s)
			{
				_pointer = CStrings.CString(s);
			}

			/// <summary>
			///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			/// <returns>
			///     The resulting <see cref="CString" />.
			/// </returns>
			public static explicit operator CString(IntPtr value)
			{
				return FromIntPtr(value);
			}

			/// <summary>
			///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			/// <returns>
			///     The resulting <see cref="CString" />.
			/// </returns>
			public static CString FromIntPtr(IntPtr value)
			{
				return new CString(value);
			}

			/// <summary>
			///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			/// <returns>
			///     The resulting <see cref="CString" />.
			/// </returns>
			public static implicit operator CString(byte* value)
			{
				return From(value);
			}

			/// <summary>
			///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			/// <returns>
			///     The resulting <see cref="CString" />.
			/// </returns>
			public static CString From(byte* value)
			{
				return new CString((nint) value);
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
			/// </summary>
			/// <param name="value">The pointer.</param>
			/// <returns>
			///     The resulting <see cref="IntPtr" />.
			/// </returns>
			public static implicit operator nint(CString value)
			{
				return value._pointer;
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
			/// </summary>
			/// <param name="value">The pointer.</param>
			/// <returns>
			///     The resulting <see cref="IntPtr" />.
			/// </returns>
			public static IntPtr ToIntPtr(CString value)
			{
				return value._pointer;
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
			/// </summary>
			/// <param name="value">The <see cref="CString" />.</param>
			/// <returns>
			///     The resulting <see cref="string" />.
			/// </returns>
			public static implicit operator string(CString value)
			{
				return ToString(value);
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
			/// </summary>
			/// <param name="value">The <see cref="CString" />.</param>
			/// <returns>
			///     The resulting <see cref="string" />.
			/// </returns>
			public static string ToString(CString value)
			{
				return CStrings.String(value);
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
			/// </summary>
			/// <param name="s">The <see cref="string" />.</param>
			/// <returns>
			///     The resulting <see cref="CString" />.
			/// </returns>
			public static implicit operator CString(string s)
			{
				return FromString(s);
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
			/// </summary>
			/// <param name="s">The <see cref="string" />.</param>
			/// <returns>
			///     The resulting <see cref="CString" />.
			/// </returns>
			public static CString FromString(string s)
			{
				return CStrings.CString(s);
			}

			/// <inheritdoc />
			public override string ToString()
			{
				return CStrings.String(this);
			}

			/// <inheritdoc />
			public override bool Equals(object? obj)
			{
				return obj is CString value && Equals(value);
			}

			/// <inheritdoc />
			public bool Equals(CString other)
			{
				return _pointer == other._pointer;
			}

			/// <inheritdoc />
			public override int GetHashCode()
			{
				return _pointer.GetHashCode();
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
			/// </summary>
			/// <param name="left">The first <see cref="CString" /> to compare.</param>
			/// <param name="right">The second <see cref="CString" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
			public static bool operator ==(CString left, CString right)
			{
				return left._pointer == right._pointer;
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
			/// </summary>
			/// <param name="left">The first <see cref="CString" /> to compare.</param>
			/// <param name="right">The second <see cref="CString" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
			public static bool operator !=(CString left, CString right)
			{
				return !(left == right);
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
			/// </summary>
			/// <param name="left">The first <see cref="CString" /> to compare.</param>
			/// <param name="right">The second <see cref="CString" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
			public static bool Equals(CString left, CString right)
			{
				return left._pointer == right._pointer;
			}
		}

		/// <summary>
		///     The collection of utility methods for interoperability with C style strings in C#.
		/// </summary>
		public static unsafe class CStrings
		{
			private static readonly Dictionary<uint, CString> StringHashesToPointers = new();
			private static readonly Dictionary<nint, string> PointersToStrings = new();
			private static readonly Dictionary<uint, CStringWide> StringHashesToPointersWide = new();
			private static readonly Dictionary<nint, string> PointersToStringsWide = new();

			/// <summary>
			///     Converts a C style string (ANSI or UTF-8) of type `char` (one dimensional byte array
			///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
			/// </summary>
			/// <param name="value">A pointer to the C string.</param>
			/// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
			public static string String(CString value)
			{
				if (value.IsNull)
				{
					return string.Empty;
				}

				if (PointersToStrings.TryGetValue(value._pointer, out var result))
				{
					return result;
				}

				var hash = Djb2((byte*) value._pointer);
				if (StringHashesToPointers.TryGetValue(hash, out var pointer2))
				{
					result = PointersToStrings[pointer2._pointer];
					return result;
				}

				// calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
				// https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
				result = Marshal.PtrToStringAnsi(value._pointer);

				if (string.IsNullOrEmpty(result))
				{
					return string.Empty;
				}

				StringHashesToPointers.Add(hash, value);
				PointersToStrings.Add(value._pointer, result);

				return result;
			}

			/// <summary>
			///     Converts a C style string (unicode) of type `wchar_t` (one dimensional ushort array
			///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
			/// </summary>
			/// <param name="value">A pointer to the C string.</param>
			/// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
			public static string StringWide(CStringWide value)
			{
				if (value.IsNull)
				{
					return string.Empty;
				}

				if (PointersToStringsWide.TryGetValue(value._pointer, out var result))
				{
					return result;
				}

				var hash = Djb2((byte*) value._pointer);
				if (StringHashesToPointersWide.TryGetValue(hash, out var pointer2))
				{
					result = PointersToStringsWide[pointer2._pointer];
					return result;
				}

				// calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
				// https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
				result = Marshal.PtrToStringUni(pointer2._pointer);

				if (string.IsNullOrEmpty(result))
				{
					return string.Empty;
				}

				StringHashesToPointersWide.Add(hash, value);
				PointersToStringsWide.Add(value._pointer, result);

				return result;
			}

			/// <summary>
			///     Converts a UTF-16 <see cref="string" /> to a C style string (one dimensional byte array terminated by a
			///     <c>0x0</c>) by allocating and copying if not already cached.
			/// </summary>
			/// <param name="str">The <see cref="string" />.</param>
			/// <returns>A C string pointer.</returns>
			public static CString CString(string str)
			{
				var hash = Djb2(str);
				if (StringHashesToPointers.TryGetValue(hash, out var r))
				{
					return r;
				}

				// ReSharper disable once JoinDeclarationAndInitializer
				var pointer = Marshal.StringToHGlobalAnsi(str);
				StringHashesToPointers.Add(hash, new CString(pointer));
				PointersToStrings.Add(pointer, str);

				return new CString(pointer);
			}

			/// <summary>
			///     Converts a C string pointer (one dimensional byte array terminated by a
			///     <c>0x0</c>) for a specified <see cref="string" /> by allocating and copying if not already cached.
			/// </summary>
			/// <param name="str">The <see cref="string" />.</param>
			/// <returns>A C string pointer.</returns>
			public static CStringWide CStringWide(string str)
			{
				var hash = Djb2(str);
				if (StringHashesToPointersWide.TryGetValue(hash, out var r))
				{
					return r;
				}

				// ReSharper disable once JoinDeclarationAndInitializer
				var pointer = Marshal.StringToHGlobalUni(str);
				StringHashesToPointersWide.Add(hash, new CStringWide(pointer));
				PointersToStringsWide.Add(pointer, str);

				return new CStringWide(pointer);
			}

			/// <summary>
			///     Converts an array of strings to an array of C strings of type `char` (multi-dimensional array of one
			///     dimensional byte arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
			/// </summary>
			/// <remarks>
			///     <para>Calls <see cref="CString" />.</para>
			/// </remarks>
			/// <param name="values">The strings.</param>
			/// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
			public static CString* CStringArray(ReadOnlySpan<string> values)
			{
				var pointerSize = IntPtr.Size;
				var result = (CString*) Marshal.AllocHGlobal(pointerSize * values.Length);
				for (var i = 0; i < values.Length; ++i)
				{
					var @string = values[i];
					var cString = CString(@string);
					result[i] = cString;
				}

				return result;
			}

			/// <summary>
			///     Converts an array of strings to an array of C strings of type `wchar_t` (multi-dimensional array of one
			///     dimensional ushort arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
			/// </summary>
			/// <remarks>
			///     <para>Calls <see cref="CString" />.</para>
			/// </remarks>
			/// <param name="values">The strings.</param>
			/// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
			public static CStringWide* CStringWideArray(ReadOnlySpan<string> values)
			{
				var pointerSize = IntPtr.Size;
				var result = (CStringWide*) Marshal.AllocHGlobal(pointerSize * values.Length);
				for (var i = 0; i < values.Length; ++i)
				{
					var @string = values[i];
					var cString = CStringWide(@string);
					result[i] = cString;
				}

				return result;
			}

			/// <summary>
			///     Frees the memory for all previously allocated C strings and releases references to all <see cref="string" />
			///     objects which happened during <see cref="String" />, <see cref="StringWide" />, <see cref="CString" />
			///     or <see cref="CStringWide" />. Does <b>not</b> garbage collect.
			/// </summary>
			public static void FreeAllStrings()
			{
				foreach (var (ptr, _) in PointersToStrings)
				{
					Marshal.FreeHGlobal(ptr);
				}

				// We can not guarantee that the application has not a strong reference the string since it was allocated,
				//  so we have to let the GC take the wheel here. Thus, this method should NOT garbage collect; that's
				//  on the responsibility of the application developer. The best we can do is just remove any and all strong
				//  references we have here to the strings.

				StringHashesToPointers.Clear();
				PointersToStrings.Clear();
			}

			/// <summary>
			///     Frees the memory for specific previously allocated C strings and releases associated references to
			///     <see cref="string" /> objects which happened during <see cref="String" /> or
			///     <see cref="CString" />. Does <b>not</b> garbage collect.
			/// </summary>
			/// <param name="pointers">The C string pointers.</param>
			/// <param name="count">The number of C string pointers.</param>
			public static void FreeCStrings(CString* pointers, int count)
			{
				for (var i = 0; i < count; i++)
				{
					var ptr = pointers[i];
					FreeCString(ptr);
				}

				Marshal.FreeHGlobal((IntPtr) pointers);
			}

			/// <summary>
			///     Frees the memory for the previously allocated C string and releases reference to the
			///     <see cref="string" /> object which happened during <see cref="String" /> or <see cref="CString" />.
			///     Does <b>not</b> garbage collect.
			/// </summary>
			/// <param name="value">The string.</param>
			public static void FreeCString(CString value)
			{
				if (!PointersToStrings.ContainsKey(value._pointer))
				{
					return;
				}

				Marshal.FreeHGlobal(value);
				var hash = Djb2(value);
				StringHashesToPointers.Remove(hash);
				PointersToStrings.Remove(value._pointer);
			}

			/// <summary>
			///     Frees the memory for the previously allocated C string and releases reference to the
			///     <see cref="string" /> object which happened during <see cref="StringWide" /> or <see cref="CStringWide" />.
			///     Does <b>not</b> garbage collect.
			/// </summary>
			/// <param name="value">The string.</param>
			public static void FreeCStringWide(CStringWide value)
			{
				if (!PointersToStringsWide.ContainsKey(value._pointer))
				{
					return;
				}

				Marshal.FreeHGlobal(value);
				var hash = Djb2(value);
				StringHashesToPointersWide.Remove(hash);
				PointersToStringsWide.Remove(value._pointer);
			}

			// djb2 is named after https://en.wikipedia.org/wiki/Daniel_J._Bernstein
			//  References:
			//  (1) https://stackoverflow.com/a/7666577/2171957
			//  (2) http://www.cse.yorku.ca/~oz/hash.html
			//  (3) https://groups.google.com/g/comp.lang.c/c/lSKWXiuNOAk/m/zstZ3SRhCjgJ
			private static uint Djb2(byte* str)
			{
				uint hash = 5381;

				unchecked
				{
					uint c;
					while ((c = *str++) != 0)
					{
						hash = (hash << 5) + hash + c; // hash * 33 + c
					}
				}

				return hash;
			}

			private static uint Djb2(string str)
			{
				uint hash = 5381;

				// ReSharper disable once ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator
				foreach (var c in str)
				{
					hash = (hash << 5) + hash + c; // hash * 33 + c
				}

				return hash;
			}
		}

		/// <summary>
		///     A pointer value type that represents a wide string; C type `wchar_t*`.
		/// </summary>
		[StructLayout(LayoutKind.Sequential)]
		public readonly unsafe struct CStringWide : IEquatable<CStringWide>
		{
			internal readonly IntPtr _pointer;

			/// <summary>
			///     Gets a value indicating whether this <see cref="CStringWide" /> is a null pointer.
			/// </summary>
			public bool IsNull => _pointer == IntPtr.Zero;

			/// <summary>
			///     Initializes a new instance of the <see cref="CStringWide" /> struct.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			public CStringWide(byte* value)
			{
				_pointer = (nint) value;
			}

			/// <summary>
			///     Initializes a new instance of the <see cref="CStringWide" /> struct.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			public CStringWide(IntPtr value)
			{
				_pointer = value;
			}

			/// <summary>
			///     Initializes a new instance of the <see cref="CStringWide" /> struct.
			/// </summary>
			/// <param name="s">The string value.</param>
			public CStringWide(string s)
			{
				_pointer = CStrings.CStringWide(s);
			}

			/// <summary>
			///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			/// <returns>
			///     The resulting <see cref="CStringWide" />.
			/// </returns>
			public static explicit operator CStringWide(IntPtr value)
			{
				return FromIntPtr(value);
			}

			/// <summary>
			///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			/// <returns>
			///     The resulting <see cref="CStringWide" />.
			/// </returns>
			public static CStringWide FromIntPtr(IntPtr value)
			{
				return new CStringWide(value);
			}

			/// <summary>
			///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			/// <returns>
			///     The resulting <see cref="CStringWide" />.
			/// </returns>
			public static implicit operator CStringWide(byte* value)
			{
				return From(value);
			}

			/// <summary>
			///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
			/// </summary>
			/// <param name="value">The pointer value.</param>
			/// <returns>
			///     The resulting <see cref="CStringWide" />.
			/// </returns>
			public static CStringWide From(byte* value)
			{
				return new CStringWide((nint) value);
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
			/// </summary>
			/// <param name="value">The pointer.</param>
			/// <returns>
			///     The resulting <see cref="IntPtr" />.
			/// </returns>
			public static implicit operator nint(CStringWide value)
			{
				return value._pointer;
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
			/// </summary>
			/// <param name="value">The pointer.</param>
			/// <returns>
			///     The resulting <see cref="IntPtr" />.
			/// </returns>
			public static IntPtr ToIntPtr(CStringWide value)
			{
				return value._pointer;
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
			/// </summary>
			/// <param name="value">The <see cref="CStringWide" />.</param>
			/// <returns>
			///     The resulting <see cref="string" />.
			/// </returns>
			public static implicit operator string(CStringWide value)
			{
				return ToString(value);
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
			/// </summary>
			/// <param name="value">The <see cref="CStringWide" />.</param>
			/// <returns>
			///     The resulting <see cref="string" />.
			/// </returns>
			public static string ToString(CStringWide value)
			{
				return CStrings.StringWide(value);
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
			/// </summary>
			/// <param name="s">The <see cref="string" />.</param>
			/// <returns>
			///     The resulting <see cref="CStringWide" />.
			/// </returns>
			public static implicit operator CStringWide(string s)
			{
				return FromString(s);
			}

			/// <summary>
			///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
			/// </summary>
			/// <param name="s">The <see cref="string" />.</param>
			/// <returns>
			///     The resulting <see cref="CStringWide" />.
			/// </returns>
			public static CStringWide FromString(string s)
			{
				return CStrings.CStringWide(s);
			}

			/// <inheritdoc />
			public override string ToString()
			{
				return CStrings.StringWide(this);
			}

			/// <inheritdoc />
			public override bool Equals(object? obj)
			{
				return obj is CStringWide value && Equals(value);
			}

			/// <inheritdoc />
			public bool Equals(CStringWide other)
			{
				return _pointer == other._pointer;
			}

			/// <inheritdoc />
			public override int GetHashCode()
			{
				return _pointer.GetHashCode();
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
			/// </summary>
			/// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
			/// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
			public static bool operator ==(CStringWide left, CStringWide right)
			{
				return left._pointer == right._pointer;
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
			/// </summary>
			/// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
			/// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
			public static bool operator !=(CStringWide left, CStringWide right)
			{
				return !(left == right);
			}

			/// <summary>
			///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
			/// </summary>
			/// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
			/// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
			/// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
			public static bool Equals(CStringWide left, CStringWide right)
			{
				return left._pointer == right._pointer;
			}
		}
	}

	#endregion
}
