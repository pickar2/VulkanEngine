#version 460

//#extension GL_AMD_gpu_shader_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_shuffle : enable
#extension GL_EXT_control_flow_attributes : enable

#define WORKGROUP_SIZE 1024
//#include "../Generated/material_constants.glsl"

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

#include "../Default/constants.glsl"
#include "../Default/structs.glsl"

readonly layout(std430, set = 0, binding = 0) buffer dataArray {
	UiElementData data[];
};

readonly layout(set = 1, binding = 0) buffer counters1Buffer {
	int counters1[];
};

layout(set = 1, binding = 1) buffer counters2Buffer {
	int counters2[];
};

readonly layout(set = 1, binding = 2) buffer offsetsBuffer {
	int offsets[];
};

layout(set = 1, binding = 3) buffer count_const {
	int elementCount;
	int z_count;
	int subgroupCounter;
};

writeonly layout(std430, set = 2, binding = 0) buffer indicesArray {
	int indices[];
};

#include "../Default/functions.glsl"

void main() {
	uint subgroupIndex = gl_LocalInvocationID.x / gl_SubgroupSize;
	int elementIndex = int(gl_GlobalInvocationID.x);

	UiElementData d = data[elementIndex];
	const bool willBeRendered = (d.flags & DISABLED) == ZERO && (d.flags & OFFSCREEN) == ZERO && elementIndex < elementCount;
	if (!willBeRendered) { return; }

	Pos pos = calcFullPos(d);
	int id4 = elementIndex * 4;
	int z = int(pos.z);

	uint firstInvocationWithSameZ;
	uint totalAmountOfInvocationsWithZ;
	int offsetAtSubgroupStart;
	int currentInvocationOffset;
	for (uint i = 0; i < gl_SubgroupSize; i++) {
		int zOfInvocationI = subgroupBroadcast(z, i);
		uvec4 invocationsWithSameZ = subgroupBallot(willBeRendered && z == zOfInvocationI);

		if (i == gl_SubgroupInvocationID) {
			firstInvocationWithSameZ = subgroupBallotFindLSB(invocationsWithSameZ);
			totalAmountOfInvocationsWithZ = subgroupBallotBitCount(invocationsWithSameZ);
			uint amountOfPreviousInvocationsWithSameZ = subgroupBallotExclusiveBitCount(invocationsWithSameZ);
			currentInvocationOffset = int(amountOfPreviousInvocationsWithSameZ) * 6;
		}
	}

	bool isFirstWithSameZ = (gl_SubgroupInvocationID == firstInvocationWithSameZ);
	for (uint i = 0; i < WORKGROUP_SIZE / gl_SubgroupSize; i++) {
		if (isFirstWithSameZ && (i == subgroupIndex)) {
			offsetAtSubgroupStart = atomicAdd(counters2[z], int(totalAmountOfInvocationsWithZ) * 6);
		}
		barrier();
	}

	offsetAtSubgroupStart = subgroupShuffle(offsetAtSubgroupStart, firstInvocationWithSameZ);

	int index = offsets[z] * 6 + offsetAtSubgroupStart + currentInvocationOffset;

	indices[index+0] = 0 + id4;
	indices[index+1] = 1 + id4;
	indices[index+2] = 2 + id4;
	indices[index+3] = 3 + id4;
	indices[index+4] = 2 + id4;
	indices[index+5] = 1 + id4;
}
